<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Binna.dev</title>
  
  <subtitle>프론트엔드 기술 블로그</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-12-05T15:38:16.200Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>binna</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>리액트 프로젝트를 gh-pages로 배포하는 방법</title>
    <link href="http://example.com/2022/12/06/[JavaScript]%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/"/>
    <id>http://example.com/2022/12/06/[JavaScript]%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/</id>
    <published>2022-12-06T09:00:59.000Z</published>
    <updated>2022-12-05T15:38:16.200Z</updated>
    
    <content type="html"><![CDATA[<h2 id="리액트-프로젝트를-gh-pages-배포하는-방법"><a href="#리액트-프로젝트를-gh-pages-배포하는-방법" class="headerlink" title="리액트 프로젝트를 gh-pages 배포하는 방법"></a>리액트 프로젝트를 gh-pages 배포하는 방법</h2><br><p>GitHub 레포지토리에 작성한 코드를 무료로 배포하는 방법을 알아보겠다.</p><br><h3 id="gh-pages-설치하기"><a href="#gh-pages-설치하기" class="headerlink" title="gh-pages 설치하기"></a>gh-pages 설치하기</h3><p>먼저 아래 명령어로 설치를 해준다</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gh-pages --save-dev</span><br></pre></td></tr></table></figure><h3 id="package-json-파일-수정하기"><a href="#package-json-파일-수정하기" class="headerlink" title="package.json 파일 수정하기"></a>package.json 파일 수정하기</h3><br><p>package.json 파일에 아래와 같이 코드와 배포할 홈페이지 주소를 추가해준다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;predeploy&quot;: &quot;npm run build&quot;,</span><br><span class="line">&quot;deploy&quot;: &quot;gh-pages -d build&quot;</span><br></pre></td></tr></table></figure><p><img src="/../images/gitpages.png" alt="packagejson파일"></p><h3 id="배포하기"><a href="#배포하기" class="headerlink" title="배포하기"></a>배포하기</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure><p>배포 명령어를 입력 후 해당 github - settings - pages를 들어가면 gh-pages 브랜치가 새로 생긴다. </p><p><img src="/../images/build.png" alt="packagejson파일"></p><p>위와 같이 Source 의 branch를 gh-pages로 위와 같이 설정해주면 무료로 웹 호스팅을 할 수 있다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;리액트-프로젝트를-gh-pages-배포하는-방법&quot;&gt;&lt;a href=&quot;#리액트-프로젝트를-gh-pages-배포하는-방법&quot; class=&quot;headerlink&quot; title=&quot;리액트 프로젝트를 gh-pages 배포하는 방법&quot;&gt;&lt;/a&gt;리액트 프로젝트</summary>
      
    
    
    
    <category term="github" scheme="http://example.com/categories/github/"/>
    
    
    <category term="github" scheme="http://example.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>자바스크립트의 실행 환경</title>
    <link href="http://example.com/2022/11/26/[JavaScript]%EC%8B%A4%ED%96%89%ED%99%98%EA%B2%BD/"/>
    <id>http://example.com/2022/11/26/[JavaScript]%EC%8B%A4%ED%96%89%ED%99%98%EA%B2%BD/</id>
    <published>2022-11-26T09:00:59.000Z</published>
    <updated>2022-12-06T03:57:33.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="자바스크립트의-실행-환경"><a href="#자바스크립트의-실행-환경" class="headerlink" title="자바스크립트의 실행 환경"></a>자바스크립트의 실행 환경</h2><p>JavaScript는 독립적인 언어가 아니라 스크립트 언어로, 특정한 프로그램 안에서만 동작을 할 수 있다. 자바스크립트를 실행하는 환경은 브라우저환경에서 실행하는 방법과 Node.js에서 실행하는 방법, 코드 에디터는 VS code를 이용하여 브라우저나, Node.js 환경에서 실행하는 방법이 있다.</p><h3 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h3><p> 모든 브라우저는 자바스크립트를 해석하고 실행할 수 있는 엔진을 내장하고 있다. 대표적으로 구글의 V8이 있다. 인터넷 익스플로어를 제외한 대부분의 모던 브라우저는 ES6를 지원한다. 지원비율은 96% ~ 99%로 육박하지만 인터넷 익스플로어나 구형 브라우저는 대부분 ES6를 지원하고 있지 않다. </p><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>Node.js는 브라우저의 자바스크립트 엔진에서만 동작하던 자바스크립트를 브라우저 이외의 환경에서도 동작할 수 있도록 자바스크립트 엔진을 브라우저에서 독립시킨 자바스크립트 실행 환경이다.<br>client개발을 위한 용도로만 국한되어 JavaScript를 크롬(Chrome)같은 브라우저에서만 쓰는 것이 아닌 브라우저 밖. 즉, 내 컴퓨터에서 다양한 용도로 확장하기위해 만들어진 것이 바로 node.js 이다.<br>Node.js 의 등장으로 자바스크립트는 브라우저를 벗어나 앱개발에서도 사용 할 수 있는 범용 언어가 되었다. 또한 백엔드에서 자바스크립트를 이용하여 서버를 개발할수 있다는 점은 프-백 간 서로의 코드를 읽고  이해할 수 있다는 점에서 큰 장점이라 할 수 있다.</p><h2 id="리액트의-런타임-환경"><a href="#리액트의-런타임-환경" class="headerlink" title="리액트의 런타임 환경"></a>리액트의 런타임 환경</h2><p>JavaScript의 런타임 환경을 공부하면서 리액트의 런타임 환경은 무엇일까? 라는 궁금증이 생겼다. 내가 헷갈렸던 부분은, 리액트의 경우 패키지 매니저가 구동되는 프로세스는 노드 환경에서 돌아가고 렌더링 결과물은 브라우저 환경에서 확인을 하고 있는데 리액트가 실행될 때 두가지 런타임 환경을 모두 거치는 것인지, 어떤 런타임 환경에서 실행이 되는 것인지 궁금했다.</p><p>구글링이나 책에도 자료가 나와있지 않아 결국 개발자 커뮤니티에 물어봤고 그에 대한 답변으로 내가 이해한 내용은 아래와 같다. </p><ol><li>브라우저에서 프론트엔드 서버 측으로 페이지 GET 요청 </li><li>프론트엔드 서버에서 html, js 번들을 응답</li><li>js 번들 다운로드 완료 후 실행 → react 실행</li></ol><p>위와 같은 시나리오에 따라 일반적인 클라이언트 사이드 렌더링(CSR)이 이루어 진다.<br>하지만 ReactDOMServer와 같은 API의 존재로 알 수 있듯이 서버 측에서도 실행이 가능하다. 보통은 서버 사이드 렌더링(SSR)이 필요할때 사용하게 되는데, 첫 응답으로 비어 있는 html이 아니라 렌더링이 완료된 html 파일을 응답으로 돌려주기 위해 주로 사용한다. (renderToString)</p><p>결국 기본적인 개발환경에서는 브라우저 환경을 띄우기 위한 목적으로 노드 런타임의 도움을 받지만 이미 배포된 리액트 프로젝트는 노드 환경 도움없이 렌더링 동작이 가능한 점을 생각해보면 기본적으로 리액트의 런타임 환경은 브라우저라고 보는게 맞는 것 같다. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;자바스크립트의-실행-환경&quot;&gt;&lt;a href=&quot;#자바스크립트의-실행-환경&quot; class=&quot;headerlink&quot; title=&quot;자바스크립트의 실행 환경&quot;&gt;&lt;/a&gt;자바스크립트의 실행 환경&lt;/h2&gt;&lt;p&gt;JavaScript는 독립적인 언어가 아니라 스</summary>
      
    
    
    
    <category term="github" scheme="http://example.com/categories/github/"/>
    
    
    <category term="github" scheme="http://example.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 얕은 복사, 깊은 복사</title>
    <link href="http://example.com/2022/10/18/%EA%B9%8A%EC%9D%80%EB%B3%B5%EC%82%AC%20%EC%96%95%EC%9D%80%EB%B3%B5%EC%82%AC/"/>
    <id>http://example.com/2022/10/18/%EA%B9%8A%EC%9D%80%EB%B3%B5%EC%82%AC%20%EC%96%95%EC%9D%80%EB%B3%B5%EC%82%AC/</id>
    <published>2022-10-18T03:00:59.000Z</published>
    <updated>2022-10-18T09:10:42.906Z</updated>
    
    <content type="html"><![CDATA[<p>깊은 복사와 얕은 복사에 대해 알아보겠다. 이 글의 초반 내용은 이전 포스팅의 (원시 타입과 참조 타입의 차이)과 맥락이 비슷하며, 위 포스팅은 원시 타입과 참조 타입의 차이점이라면 아래는 참조 타입의 깊은 복사하는 방법에 대해 알아보도록 하겠다.</p><h2 id="얕은-복사-shallow-copy"><a href="#얕은-복사-shallow-copy" class="headerlink" title="얕은 복사(shallow copy)"></a>얕은 복사(shallow copy)</h2><p>얖은 복사는 참조(주소)값의 복사를 나타낸다.</p><figure class="highlight java"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="variable">obj</span> <span class="operator">=</span> &#123; vaule: <span class="number">1</span> &#125;</span><br><span class="line"><span class="type">const</span> <span class="variable">newObj</span> <span class="operator">=</span> obj;</span><br><span class="line"></span><br><span class="line">newObj.vaule = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">console.log(obj.vaule); <span class="comment">// 2</span></span><br><span class="line">console.log(obj === newObj); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>obj 객체를 새로운 newObj 객체에 할당하였으며 이를 참조 할당이라 부른다. 복사 후 newObj 객체의 value값을 변경하였더니 기존의 obj.value값도 같이 변경된 것을 알 수 있다. 두 객체를 비교해도 true로 나온다. 이렇게 자바스크립트의 참조 타입은 얕은 복사가 된다고 볼 수 있으며, 이는 데이터가 그대로 생성되는 것이 아닌 해당 데이터의 참조 값(메모리 주소)를 전달하여 결국 한 데이터를 공유하는 것이다.</p><h2 id="깊은-복사-deep-copy"><a href="#깊은-복사-deep-copy" class="headerlink" title="깊은 복사(deep copy)"></a>깊은 복사(deep copy)</h2><p>깊은 복사는 값 자체의 복사를 나타낸다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line"></span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>화살표 함수를 함수 선언식으로 변경하면 아래와 같다.</p><figure class="highlight java"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, [options])</span><br><span class="line">  .then(function(res) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.json();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function(res) &#123;</span><br><span class="line">    <span class="comment">// data를 응답 받은 후 로직</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>변수 a를 새로운 b에 할당하였고 b 값을 변경하여도 기존의 a의 값은 변경되지 않는다. 두 값을 비교하면 false가 출력되며 서로의 값은 단독으로 존재하다는 것을 알 수 있다. 이렇게 자바스크립트의 원시 타입은 깊은 복사가 되며, 이는 독립적인 메모리에 값 자체를 할당하여 생성하는 것이라 볼 수 있다.</p><h2 id="객체의-깊은-복사"><a href="#객체의-깊은-복사" class="headerlink" title="객체의 깊은 복사"></a>객체의 깊은 복사</h2><p>객체를 그대로 복사하여 사용할 경우 기존 객체의 원본 데이터가 더럽혀 질 수 있기 때문에 객체의 깊은 복사는 매우 중요하다. 객체를 깊이 복사하는 방법에 대해 몇가지 알아보자.</p><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h3><p>Object.assign() 메서드를 활용하는 방법이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">문법</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(생성할 객체, 복사할 객체) 메서드의 첫번째 인수로 빈 객체를 넣어주며, 두번째 인수로 할당할 객체를 넣으면 된다.</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj);</span><br><span class="line"></span><br><span class="line">newObj.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; a: 1 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj === newObj); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>새로운 newObj 객체를 Object.assign() 메서드를 사용하여 생성하였으며, newObj.a 값을 변경하여도 기존의 obj는 변하지 않았다. 서로의 객체를 비교해도 false로 뜨며 서로 참조값이 다르다는 것을 알 수 있다.</p><p>Object.assign()는 2차원 객체는 깊은 복사가이루어지지 않는다<br>하지만 Object.assign()를 활용한 복사는 완벽한 깊은 복사가 아니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">c</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>위처럼 obj 객체의 b 프로퍼티의 값으로 { c: 2 } 객체를 가진 2차원 객체일 경우는 경우는 어떨까?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">c</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj);</span><br><span class="line"></span><br><span class="line">newObj.<span class="property">b</span>.<span class="property">c</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; a: 1, b: &#123; c: 3 &#125; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">b</span>.<span class="property">c</span> === newObj.<span class="property">b</span>.<span class="property">c</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>2차원 객체를 newObj에 복사하고, newObj.b.c의 값을 변경하였다. 기존 obj 객체를 출력해보면 newObj.b.c의 값도 3으로 변경되었다. 복사된 하위 객체 { c: 2 }도 결국 객체이기 때문에 얕은 복사가 이루어진 것이다. 이는 Object.assign() 메서드의 한계이며, 전개연산자(Spread Operator) 를 이용한 객체의 복사에도 같은 문제가 있다.</p><h2 id="전개연산자-Spread-Operator"><a href="#전개연산자-Spread-Operator" class="headerlink" title="전개연산자(Spread Operator)"></a>전개연산자(Spread Operator)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj);</span><br><span class="line"></span><br><span class="line">newObj.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; a: 1 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj === newObj); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>전개연산자를 활용해도 객체의 깊은 복사가 가능하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">c</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = &#123; ...obj &#125;;</span><br><span class="line"></span><br><span class="line">newObj.<span class="property">b</span>.<span class="property">c</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; a: 1, b: &#123; c: 3 &#125; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">b</span>.<span class="property">c</span> === newObj.<span class="property">b</span>.<span class="property">c</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>하지만 Object.assign()와 마찬가지로 2차원 객체는 얕은 복사가 되는 것을 확인할 수 있다.</p><h3 id="JSON-객체-메서드를-이용"><a href="#JSON-객체-메서드를-이용" class="headerlink" title="JSON 객체 메서드를 이용"></a>JSON 객체 메서드를 이용</h3><p>객체의 깊은 복사를 위해 JSON 객체의 stringify(), parse() 메서드를 사용할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">문법</span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>() 메서드는 인수로 객체를 받으며 받은 객체는 문자열로 치환되며, <span class="title class_">JSON</span>.<span class="title function_">parse</span>() 메서드는 문자열을 인수로 받으며, 받은 문자열을 객체로 치환한다.</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">c</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"></span><br><span class="line">newObj.<span class="property">b</span>.<span class="property">c</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; a: 1, b: &#123; c: 2 &#125; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">b</span>.<span class="property">c</span> === newObj.<span class="property">b</span>.<span class="property">c</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>obj 객체를 JSON.stringify() 메서드를 이용하여 문자열로 변환한 뒤 다시 JSON.parse() 메서드로 객체로 변환하였다. 문자열로 변환한 뒤 다시 객체로 변환하였기에 2차원 객체에 대한 참조가 사라졌다. 하지만 이 방법도 2가지 문제가 있는데, 다른 방법에 비해 성능이 느린 점과 JSON.stringify() 메서드는 함수를 만났을 때 undefined로 처리한다는 점이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">c</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">func</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj.<span class="property">func</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>복사된 newObj는 func가 없고 undefined로 출력되고 있다.</p><h3 id="커스텀-재귀-함수"><a href="#커스텀-재귀-함수" class="headerlink" title="커스텀 재귀 함수"></a>커스텀 재귀 함수</h3><p>이 문제를 원칙적으로 해결하려면 직접 깊은 복사를 구현하는 커스텀 재귀 함수를 사용하는 것이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> copy = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    copy[key] = <span class="title function_">deepCopy</span>(obj[key]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">c</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">func</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title function_">deepCopy</span>(obj);</span><br><span class="line"></span><br><span class="line">newObj.<span class="property">b</span>.<span class="property">c</span> = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; a: 1, b: &#123; c: 2 &#125;, func: [Function: func] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">b</span>.<span class="property">c</span> === newObj.<span class="property">b</span>.<span class="property">c</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>deepCopy 함수의 인수로 obj 객체를 넣었다. 인수값이 객체가 아닌 경우는 그냥 반환하며, 객체인 경우 객체의 값 만큼 루프를 돌며 재귀를 호출하여 복사된 값을 반환한다. 복사된 newObj 객체를 보면 2차원 객체의 값도 깊은 복사가 이루어 졌으며, 객체의 함수도 제대로 표현되는 것을 확인할 수 있다.</p><p>하지만 이미 객체의 깊은 복사를 위한 오픈 소스가 존재하며 lodash 모듈의 cloneDeep()을 이용하면 된다.</p><h3 id="lodash-모듈의-cloneDeep"><a href="#lodash-모듈의-cloneDeep" class="headerlink" title="lodash 모듈의 cloneDeep()"></a>lodash 모듈의 cloneDeep()</h3><p>lodash 모듈의 cloneDeep() 메서드를 이용하여 객체의 깊은 복사가 가능하다. 해당 모듈을 설치해 준 뒤 아래 코드를 실행시켜 보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; npm i lodash</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>lodash </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const obj = &#123;</span><br><span class="line">  a: 1,</span><br><span class="line">  b: &#123;</span><br><span class="line">    c: 2,</span><br><span class="line">  &#125;,</span><br><span class="line">  func: function () &#123;</span><br><span class="line">    return this.a;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const newObj = lodash.cloneDeep(obj);</span><br><span class="line"></span><br><span class="line">newObj.b.c = 3;</span><br><span class="line">console.log(obj); // &#123; a: 1, b: &#123; c: 2 &#125;, func: [Function: func] &#125;</span><br><span class="line">console.log(obj.b.c === newObj.b.c); // false</span><br></pre></td></tr></table></figure><p>간단히 객체의 깊은 복사를 구현할 수 있다. 실제로 웹 개발을 하다보면 lodash 모듈은 흔히 사용되며, 가장 손쉽게 객체의 깊은 복사를 해결하는 방법이라 할 수 있다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://velog.io/@nomadhash/Java-Script-%EA%B9%8A%EC%9D%80-%EB%B3%B5%EC%82%AC%EC%99%80-%EC%96%95%EC%9D%80-%EB%B3%B5%EC%82%AC-1dus9z79">[Java Script] 얕은 복사와 깊은 복사</a></p></blockquote><blockquote><p><a href="https://chaewonkong.github.io/posts/js-deep-copy.html">JavaScript로 Deep Copy 하는 여러 방법</a></p></blockquote><blockquote><p><a href="https://mygumi.tistory.com/m/322">Javascript:Shallow and Deep Copy :: 마이구미</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;깊은 복사와 얕은 복사에 대해 알아보겠다. 이 글의 초반 내용은 이전 포스팅의 (원시 타입과 참조 타입의 차이)과 맥락이 비슷하며, 위 포스팅은 원시 타입과 참조 타입의 차이점이라면 아래는 참조 타입의 깊은 복사하는 방법에 대해 알아보도록 하겠다</summary>
      
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>React - 로그인/회원가입 유효성 검사 및 API 호출 / 투두리스트 체크박스 수정,삭제 기능 UI배포</title>
    <link href="http://example.com/2022/10/13/[react]%EC%9B%90%ED%8B%B0%EB%93%9C%ED%94%84%EB%A6%AC%EC%98%A8%EB%B3%B4%EB%94%A9/"/>
    <id>http://example.com/2022/10/13/[react]%EC%9B%90%ED%8B%B0%EB%93%9C%ED%94%84%EB%A6%AC%EC%98%A8%EB%B3%B4%EB%94%A9/</id>
    <published>2022-10-13T07:31:00.000Z</published>
    <updated>2022-10-18T10:12:34.816Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="배포-링크-https-bitnaleeeee-github-io-wanted-pre-onboarding-fe-7"><a href="#배포-링크-https-bitnaleeeee-github-io-wanted-pre-onboarding-fe-7" class="headerlink" title="배포 링크 : https://bitnaleeeee.github.io/wanted-pre-onboarding-fe-7/"></a>배포 링크 : <a href="https://bitnaleeeee.github.io/wanted-pre-onboarding-fe-7/">https://bitnaleeeee.github.io/wanted-pre-onboarding-fe-7/</a></h4></li></ul><h3 id="STACK"><a href="#STACK" class="headerlink" title="STACK"></a>STACK</h3><p><img src="https://img.shields.io/badge/HTML-E34F26?style=for-the-badge&logo=HTML5&logoColor=white"> <img src="https://img.shields.io/badge/CSS3-1572B6?style=for-the-badge&logo=CSS3&logoColor=white"> <img src="https://img.shields.io/badge/JavaScript-F7DF1E?style=for-the-badge&logo=JavaScript&logoColor=white"> <img src="https://img.shields.io/badge/React-61DAFB?style=for-the-badge&logo=React&logoColor=white"> <img src="https://img.shields.io/badge/React_Router-CA4245?style=for-the-badge&logo=React Router&logoColor=white"> <img src="https://img.shields.io/badge/SASS-cc6699.svg?&style=for-the-badge&logo=Sass&logoColor=White"></p><hr><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ul><li><a href="#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%9D%98%EC%8B%A4%ED%96%89">프로젝트의 실행</a></li><li><a href="#%ED%8F%B4%EB%8D%94%EA%B5%AC%EC%A1%B0">폴더 구조</a></li><li><a href="#%EA%B5%AC%ED%98%84%EC%82%AC%ED%95%AD">구현 사항</a></li></ul><hr></br><h2 id="프로젝트의실행"><a href="#프로젝트의실행" class="headerlink" title="프로젝트의실행"></a>프로젝트의실행</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure></br><h2 id="폴더구조"><a href="#폴더구조" class="headerlink" title="폴더구조"></a>폴더구조</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">📦 src</span><br><span class="line">├── 📂 pages</span><br><span class="line">│   ├──📂 Auth</span><br><span class="line">│   │    ├── 📂 SignIn</span><br><span class="line">│   │    │    ├── 📜 SignIn.js</span><br><span class="line">│   │    │    └── 📜 SignIn.scss</span><br><span class="line">│   │    └── 📂 SignUp</span><br><span class="line">│   │         ├── 📜 SignUp.js</span><br><span class="line">│   │         └── 📜 SignUp.scss</span><br><span class="line">│   │</span><br><span class="line">│   └── 📂 Todo</span><br><span class="line">│        ├──📜 Todo.js</span><br><span class="line">│        ├──📜 Todo.scss</span><br><span class="line">│        ├──📜 TodoForm.js</span><br><span class="line">│        ├──📜 TodoForm.scss</span><br><span class="line">│        ├──📜 TodoItem.js</span><br><span class="line">│        ├──📜 TodoItem.scss</span><br><span class="line">│        └──📜 TodoList.js</span><br><span class="line">│</span><br><span class="line">├── 📜 config.js</span><br><span class="line">├── 📜 index.js</span><br><span class="line">└── 📜 Router.js</span><br></pre></td></tr></table></figure><h2 id="구현사항"><a href="#구현사항" class="headerlink" title="구현사항"></a>구현사항</h2></br><h1 id="로그인-x2F-회원가입"><a href="#로그인-x2F-회원가입" class="headerlink" title="로그인 &#x2F; 회원가입"></a>로그인 &#x2F; 회원가입</h1></br><ul><li><h3 id="토큰이-있을-경우-todo-페이지로-이동"><a href="#토큰이-있을-경우-todo-페이지로-이동" class="headerlink" title="토큰이 있을 경우 todo 페이지로 이동"></a>토큰이 있을 경우 todo 페이지로 이동</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SignIn.js</span></span><br><span class="line"><span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;token&quot;</span>)) &#123;</span><br><span class="line">    <span class="title function_">navigate</span>(<span class="string">&quot;/todo&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [navigate]);</span><br></pre></td></tr></table></figure><p>로컬 스토리지에 토큰이 있는 상태로 <code>/</code> 에 접속할 경우 <code>todo</code>페이지로 연결됩니다.<br></br></p><ul><li><h3 id="아이디-비밀번호-로그인-조건-충족시-로그인-버튼-활성화"><a href="#아이디-비밀번호-로그인-조건-충족시-로그인-버튼-활성화" class="headerlink" title="아이디, 비밀번호 로그인 조건 충족시 로그인 버튼 활성화"></a>아이디, 비밀번호 로그인 조건 충족시 로그인 버튼 활성화</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SignIn.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> idValue = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pwValue = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SignIn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [val, setVal] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">loginCheck</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">id</span> === <span class="string">&quot;id&quot;</span>) &#123;</span><br><span class="line">      idValue = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      pwValue = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    idValue.<span class="title function_">includes</span>(<span class="string">&quot;@&quot;</span>) &amp;&amp; pwValue.<span class="property">length</span> &gt;= <span class="number">8</span> ? <span class="title function_">setVal</span>(<span class="literal">false</span>) : <span class="title function_">setVal</span>(<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>전역 변수에 <code>idValue</code> 와 <code>pwValue</code>를 빈값으로 선언한 후 아아디와 비밀번호 창에 입력이 될 때 <code>onClick</code>이벤트를 주고 해당 입력값을 각 변수에 담았습니다. 삼항 연산자로 각 아이디 비밀번호의 입력 값이 조건에 충족할 경우 <code>useState</code>에 <code>true</code> <code>false</code> 값에 따라 버튼을 활성, 비활성화 시킵니다. 조건에 충족할때만 버튼이 활성화 되도록 하였습니다.<br></br><br></br></p><ul><li><h3 id="로그인시-아이디-비밀번호-확인-및-토큰-발급"><a href="#로그인시-아이디-비밀번호-확인-및-토큰-발급" class="headerlink" title="로그인시 아이디, 비밀번호 확인 및 토큰 발급"></a>로그인시 아이디, 비밀번호 확인 및 토큰 발급</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SignIn.js</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">login</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">fetch</span>(<span class="variable constant_">API</span>.<span class="property">LOGIN</span>, &#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        <span class="attr">email</span>: idValue,</span><br><span class="line">        <span class="attr">password</span>: pwValue,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="property">access_token</span>) &#123;</span><br><span class="line">          <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, data.<span class="property">access_token</span>);</span><br><span class="line">          <span class="title function_">navigate</span>(<span class="string">&#x27;/todo&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">alert</span>(<span class="string">&#x27;아이디 또는 비밀번호를 확인해주세요.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>[JSX]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button disabled=&#123;val&#125; type=<span class="string">&quot;submit&quot;</span> id=<span class="string">&quot;button&quot;</span> onClick=&#123;login&#125;&gt;</span><br><span class="line">  로그인</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><p><code>useState</code>에 값이 <code>false</code>가 담길때만 로그인 활성화 되도록 작성하였고, 활성화 된 버튼에 <code>onClick</code>이벤트가 발생할 경우 <code>login</code>함수가 실행되도록 하였습니다. 로그인 조건이 충족되었을때 <code>fetch</code>로 각 아이디, 비밀번호 입력 값을 담아 토큰 발행 요청을 보내어 로컬 스토리지에 저장 후, <code>todo</code> 페이지로 바로 이동합니다. 조건 미충족 및 입력을 잘못하여 토큰을 받을 수 없는 경우에는 로그인이 불가함을 <code>alert</code> 창 으로 안내합니다.<br></br><br></br></p><ul><li><h3 id="아이디-비밀번호-조건-충족시-회원가입-버튼-활성화"><a href="#아이디-비밀번호-조건-충족시-회원가입-버튼-활성화" class="headerlink" title="아이디, 비밀번호 조건 충족시 회원가입 버튼 활성화"></a>아이디, 비밀번호 조건 충족시 회원가입 버튼 활성화</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SignUp.js</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> idValue = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> nameValue = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> pwValue = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">SignUp</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [val, setVal] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">userInfo</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">id</span> === <span class="string">&#x27;id&#x27;</span>) &#123;</span><br><span class="line">      idValue = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">id</span> === <span class="string">&#x27;name&#x27;</span>) &#123;</span><br><span class="line">      nameValue = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      pwValue = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">signUpCheck</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">signUpCheck</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (idValue.<span class="title function_">includes</span>(<span class="string">&#x27;@&#x27;</span>) &amp;&amp; pwValue.<span class="property">length</span> &gt;= <span class="number">8</span> &amp;&amp; nameValue.<span class="property">length</span> &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_">setVal</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">setVal</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">signUpCheck</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (idValue.<span class="title function_">includes</span>(<span class="string">&#x27;@&#x27;</span>) &amp;&amp; pwValue.<span class="property">length</span> &gt;= <span class="number">8</span> &amp;&amp; nameValue.<span class="property">length</span> &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_">setVal</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">setVal</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>전역 변수에 회원가입 창에 아이디,성명,비밀번호 값을 담을 변수를 빈 값으로 선언했습니다.<br>각 입력창에 <code>onChange</code>이벤트가 실행될때 <code>userInfo</code>함수가 실행되도록 작성하였습니다. 해당 함수는 각 입력창의 값을 이벤트가 발생할때 해당되는 변수에 담은 후 <code>signUpCheck</code>함수를 실행합니다. 이 함수는 아이디와 비밀번호를 충족하는지 검사한 후 <code>useState</code>를 이용하여 값의 변화를 변수에 담도록 하였습니다.<br></br></p><p>[JSX]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button disabled=&#123;val&#125; type=<span class="string">&quot;submit&quot;</span> id=<span class="string">&quot;signUp&quot;</span></span><br><span class="line">onClick=&#123;validSignUp&#125; &gt;</span><br></pre></td></tr></table></figure><p>val에 변동되는 값에 따라 <code>useState</code>값이 <code>true</code>일 경우 버튼이 비활성화되고, 입력 조건이 충족하여 <code>false</code>일 경우 버튼이 활성화 되도록 하였습니다.<br></br><br></br></p><ul><li><h3 id="회원가입시-아이디-비밀번호-확인-및-토큰-발급-후-로그인-페이지로-이동"><a href="#회원가입시-아이디-비밀번호-확인-및-토큰-발급-후-로그인-페이지로-이동" class="headerlink" title="회원가입시 아이디, 비밀번호 확인 및 토큰 발급 후 로그인 페이지로 이동"></a>회원가입시 아이디, 비밀번호 확인 및 토큰 발급 후 로그인 페이지로 이동</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SignUp.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">validSignUp</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="variable constant_">API</span>.<span class="property">SIGNUP</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">      <span class="attr">email</span>: idValue,</span><br><span class="line">      <span class="attr">password</span>: pwValue,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (data.<span class="property">error</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">alert</span>(data.<span class="property">message</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;token&quot;</span>, data.<span class="property">access_token</span>);</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;환영합니다!&quot;</span>);</span><br><span class="line">      <span class="title function_">navigate</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>회원가입 시 입력한 아이디, 비밀번호를 담아 토큰 발급을 요청하고 회원 가입 입력 조건이 미충족 되는 경우 해당 에러 메시지를 <code>alert</code>창에 출력하도록 작성했습니다. 만약 토큰이 발급되었을 경우, 이를 로컬스토리지에 저장한 후 로그인창으로 바로 이동하도록 하였습니다.</p><p><br><br></p><h1 id="투두-리스트"><a href="#투두-리스트" class="headerlink" title="투두 리스트"></a>투두 리스트</h1></br><p>투두 리스트 컴포넌트 구조는 아래와 같습니다.<br></br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">📜 Todo.js</span><br><span class="line"> ├──📜 TodoForm.js</span><br><span class="line"> └──📜 TodoList.js</span><br><span class="line">     └──📜 TodoItem.js</span><br></pre></td></tr></table></figure><ul><li><h3 id="투두-컴포넌트-네가지-기능의-함수가-있습니다"><a href="#투두-컴포넌트-네가지-기능의-함수가-있습니다" class="headerlink" title="투두 컴포넌트, 네가지 기능의 함수가 있습니다."></a>투두 컴포넌트, 네가지 기능의 함수가 있습니다.</h3></li></ul><ol><li>초기 셋팅</li><li>항목 추가</li><li>항목 삭제</li><li>항목 수정</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Todo.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Todo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getTodo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// [API]</span></span><br><span class="line">    <span class="title function_">fetch</span>(<span class="variable constant_">API</span>.<span class="property">TODO</span>, &#123;</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="title class_">Authorization</span>: <span class="string">`Bearer <span class="subst">$&#123;<span class="variable language_">localStorage</span>.getItem(<span class="string">&quot;token&quot;</span>)&#125;</span>`</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setTodoData</span>(data);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">addTodoItem</span> = (<span class="params">item</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="variable constant_">API</span>.<span class="property">TODO</span>, &#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="title class_">Authorization</span>: <span class="string">`Bearer <span class="subst">$&#123;<span class="variable language_">localStorage</span>.getItem(<span class="string">&quot;token&quot;</span>)&#125;</span>`</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        <span class="attr">todo</span>: item,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setTodoData</span>(</span><br><span class="line">          todoData.<span class="title function_">concat</span>(&#123;</span><br><span class="line">            <span class="attr">id</span>: data.<span class="property">id</span>,</span><br><span class="line">            ...&#123; <span class="attr">isCompleted</span>: <span class="literal">false</span>, <span class="attr">todo</span>: item &#125;,</span><br><span class="line">          &#125;)</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">removeTodoItem</span> = (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">`<span class="subst">$&#123;API.TODO&#125;</span>/<span class="subst">$&#123;id&#125;</span>`</span>, &#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&quot;DELETE&quot;</span>,</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="title class_">Authorization</span>: <span class="string">`Bearer <span class="subst">$&#123;<span class="variable language_">localStorage</span>.getItem(<span class="string">&quot;token&quot;</span>)&#125;</span>`</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">setTodoData</span>(</span><br><span class="line">      todoData.<span class="title function_">filter</span>(<span class="function">(<span class="params">todoArr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> todoArr.<span class="property">id</span> !== id;</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">updateTodoItem</span> = (<span class="params">id, check, todo</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">`<span class="subst">$&#123;API.TODO&#125;</span>/<span class="subst">$&#123;id&#125;</span>`</span>, &#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&quot;PUT&quot;</span>,</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="title class_">Authorization</span>: <span class="string">`Bearer <span class="subst">$&#123;<span class="variable language_">localStorage</span>.getItem(<span class="string">&quot;token&quot;</span>)&#125;</span>`</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        <span class="attr">todo</span>: todo,</span><br><span class="line">        <span class="attr">isCompleted</span>: check,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setTodoData</span>(</span><br><span class="line">          todoData.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> item.<span class="property">id</span> === id</span><br><span class="line">              ? &#123; ...item, ...&#123; <span class="attr">isCompleted</span>: check &#125;, ...&#123; <span class="attr">todo</span>: todo &#125; &#125;</span><br><span class="line">              : item;</span><br><span class="line">          &#125;)</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>초기 셋팅<br><code>getTodo</code> 함수에서는 <code>fetch</code>를 이용하여 해당 계정에 저장되어있는 투두 리스트를 받아 <code>setTodoData</code> 함수로 리스트를 셋팅합니다. 맨 처음 가입한 회원은 따로 저장된 투두 리스트가 없기 때문에 셋팅을 따로 안해줍니다.</li><li>항목 추가<br><code>addTodoItem</code> 함수는 <code>TodoForm</code> 컴포넌트에서 받은 할일 항목을 요청값으로 보내고 서버에서는 응답값으로 해당 항목을 저장한 아이디를 보내줍니다. 서버에서 응답을 받을 시점에 <code>setTodoData</code> 함수로 응답받은 아이디와 추가한 투두 항목을 저장해줍니다.</li><li>삭제<br><code>removeTodoItem</code> 함수는 서버 요청 url에 파라미터로 삭제할 아이디를 요청하며 통신 메서드는 <code>DELETE</code> 메서드로 요청합니다. 서버에 요청 후 <code>filter</code> 메서드를 활용해서 삭제한 아이디가 아닌 항목들을 리턴하여 리스트를 다시 구성해줍니다.</li><li>수정<br><code>updateTodoItem</code>는 투두 항목의 할일 목록 및 할일 체크 유무를 업데이트 하기 위한 함수입니다. 하위 컴포넌트(<code>TodoItem</code>)에서 id, check, todo을 받아오며 서버에는 수정할 투두 항목의 아이디를 url에 파라미터로 보내주며, 통신 body에 할일 목록 및 체크 유무를 보내줍니다. <code>setTodoData</code> 함수에는 해당 아이디와 매칭되는 투두 항목에 새롭게 바뀐 할일 내용 및 체크 유무를 셋팅해 줍니다.</li></ol><ul><li><h3 id="투두-항목-할일-추가-컴포넌트"><a href="#투두-항목-할일-추가-컴포넌트" class="headerlink" title="투두 항목(할일) 추가 컴포넌트"></a>투두 항목(할일) 추가 컴포넌트</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TodoForm.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ToDoForm</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeTodoStr</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTodoStr</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">keyPress</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&quot;Enter&quot;</span>) &#123;</span><br><span class="line">      <span class="title function_">clickAddBtn</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">clickAddBtn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (todoStr.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="title function_">addTodoItem</span>(todoStr);</span><br><span class="line">      <span class="title function_">setTodoStr</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>텍스트 인풋에 내용을 작성하면 <code>changeTodoStr</code> 함수의 <code>setTodoStr</code>함수로 내용을 실시간으로 업데이트하며, 추가 버튼을 누르면 <code>props</code>에서 받아온 <code>addTodoItem</code>함수로 작성한 내용을 전달해 줍니다. 이 함수는 <code>Todo</code> 컴포넌트에서 작성된 투두 항목을 받아 서버로 요청하게 됩니다. 엔터키를 눌러도 <code>keyPress</code> 함수가 실행되어 할일 내용을 추가하게 됩니다.</p><ul><li><h3 id="투두-리스트-컴포넌트"><a href="#투두-리스트-컴포넌트" class="headerlink" title="투두 리스트 컴포넌트"></a>투두 리스트 컴포넌트</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TodoList.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">TodoList</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; todoData, removeTodoItem, updateTodoItem &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todoList&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;todoData.map((item, idx) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">TodoItem</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;idx&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">data</span>=<span class="string">&#123;item&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">removeTodoItem</span>=<span class="string">&#123;removeTodoItem&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">updateTodoItem</span>=<span class="string">&#123;updateTodoItem&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        );</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TodoList</span>;</span><br></pre></td></tr></table></figure><p><code>Todo</code> 컴포넌트에서 투두 항목에 데이터를 전달해주고 삭제(<code>removeTodoItem</code>) 및 업데이트(<code>updateTodoItem</code>) 함수를 전달해 줍니다.</p><ul><li><h3 id="투두-항목-셋팅-컴포넌트"><a href="#투두-항목-셋팅-컴포넌트" class="headerlink" title="투두 항목 셋팅 컴포넌트"></a>투두 항목 셋팅 컴포넌트</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TodoItem.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> prevTodoStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">TodoItem</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, removeTodoItem, updateTodoItem &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> [editing, setEditing] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [todoStr, setTodoStr] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [todoCheck, setTodoCheck] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setTodoStr</span>(data.<span class="property">todo</span>);</span><br><span class="line">    <span class="title function_">setTodoCheck</span>(data.<span class="property">isCompleted</span>);</span><br><span class="line">  &#125;, [data.<span class="property">todo</span>, data.<span class="property">isCompleted</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeEdition</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    prevTodoStr = todoStr;</span><br><span class="line">    <span class="title function_">setTodoStr</span>(todoStr);</span><br><span class="line">    <span class="title function_">setEditing</span>(!editing);</span><br><span class="line">    <span class="title function_">updateTodoItem</span>(data.<span class="property">id</span>, todoCheck, todoStr);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">cencelEdtiong</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTodoStr</span>(prevTodoStr);</span><br><span class="line">    <span class="title function_">setEditing</span>(!editing);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeTodoStr</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTodoStr</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">deleteTodoItem</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">removeTodoItem</span>(data.<span class="property">id</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeCheckbox</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTodoCheck</span>(!todoCheck);</span><br><span class="line">    <span class="title function_">updateTodoItem</span>(data.<span class="property">id</span>, !todoCheck, todoStr);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (editing) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">checked</span>=<span class="string">&#123;todoCheck&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;changeCheckbox&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">readOnly</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;todoStr&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;changeTodoStr&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;btnBox&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">className</span>=<span class="string">&quot;sendBtn&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;changeEdition&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            제출</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">className</span>=<span class="string">&quot;cencleBtn&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;cencelEdtiong&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            취소</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">htmlFor</span>=<span class="string">&#123;</span>&quot;<span class="attr">chk_</span>&quot; + <span class="attr">data.id</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&#123;data.isCompleted</span> ? &quot;<span class="attr">clear</span>&quot; <span class="attr">:</span> &quot;&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">id</span>=<span class="string">&#123;</span>&quot;<span class="attr">chk_</span>&quot; + <span class="attr">data.id</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">checked</span>=<span class="string">&#123;todoCheck&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;changeCheckbox&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">readOnly</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;todoStr&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;btnBox&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">className</span>=<span class="string">&quot;modifyBtn&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;changeEdition&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          수정</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">className</span>=<span class="string">&quot;deleteBtn&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;deleteTodoItem&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          삭제</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TodoItem</span>;</span><br></pre></td></tr></table></figure><p><code>TodoItem</code> 컴포넌트에서는 삭제&#x2F;수정&#x2F;수정취소&#x2F;할일 완수 유무를 셋팅합니다.</p><ol><li><p>초기값 셋팅 및 내용 수정<br><code>useEffect</code>로 초기에 각 받아온 항목을 셋팅하며 <code>changeEdition</code> 함수는 할일 내용을 편집합니다. 편집하는 순간에 <code>prevTodoStr</code> 변수에 수정되기 전 할일 내용을 넣어주며 이는 할일 편집 취소를 클릭했을 때 수정되기 전 내용으로 변경하기 위해 사용됩니다. 할일 내용을 편집할때는 <code>editing</code> 변수가 <code>true</code>가 되며 이때 <code>JSX</code>는 수정 모드로 보여지게 됩니다. 할일 내용을 수정하면 <code>props</code>에서 받아온 <code>updateTodoItem</code> 함수에 아이디, 할일, 할일 완수 유무를 보내주며 이 데이터는 서버로 보내서 데이터를 업데이트 하게 됩니다.</p></li><li><p>수정 취소<br>편집중 취소 버튼은 <code>cencelEdtiong</code> 함수가 실행되며 할일 내용 수정하기 전 내용(<code>prevTodoStr</code>)로 셋팅해 줍니다.</p></li><li><p>내용 삭제<br>삭제 버튼은 <code>deleteTodoItem</code> 함수를 실행하며 <code>props</code>에서 받아온 <code>removeTodoItem</code>함수에 삭제할 항목의 아이디를 인자값으로 보내줍니다. 이 함수는 서버에 <code>DELETE</code>에서드를 활용한 요청으로 서버에서 해당 항목을 삭제하게 됩니다.</p></li><li><p>할일 완수 유무(체크박스)<br>체크박스는 체크할 때마다 <code>changeCheckbox</code> 함수를 실행하며 삭제 버튼과 마찬가지로 <code>props</code>애서 받아온 <code>updateTodoItem</code>함수를 호출하여 할일 완수 유무를 업데이트 해줍니다.</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;배포-링크-https-bitnaleeeee-github-io-wanted-pre-onboarding-fe-7&quot;&gt;&lt;a href=&quot;#배포-링크-https-bitnaleeeee-github-io-wanted-pre-onboar</summary>
      
    
    
    
    <category term="React" scheme="http://example.com/categories/React/"/>
    
    
    <category term="token" scheme="http://example.com/tags/token/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 전개연산자(Spread Operator)</title>
    <link href="http://example.com/2022/09/28/%EC%A0%84%EA%B0%9C%EC%97%B0%EC%82%B0%EC%9E%90/"/>
    <id>http://example.com/2022/09/28/%EC%A0%84%EA%B0%9C%EC%97%B0%EC%82%B0%EC%9E%90/</id>
    <published>2022-09-28T03:00:59.000Z</published>
    <updated>2022-10-18T09:12:08.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><p>ECMAScript6(2015)에서 새로 추가된 전개연산자(Spread Operator)란 객체나 배열의 값을 하나 하나 넘기는 용도로 사용할 수 있다. 전개연산자를 사용하는 방법은 점 세개(…)를 붙이면 된다.</p><h2 id="직관적이고-배열의-아무-곳에-추가-가능하다"><a href="#직관적이고-배열의-아무-곳에-추가-가능하다" class="headerlink" title="직관적이고, 배열의 아무 곳에 추가 가능하다."></a>직관적이고, 배열의 아무 곳에 추가 가능하다.</h2><h3 id="ES5-배열-내용-조합"><a href="#ES5-배열-내용-조합" class="headerlink" title="ES5 배열 내용 조합"></a>ES5 배열 내용 조합</h3><p>ES5 에서는 배열의 내용을 합쳐 새로운 배열을 만들기 위해서 concat 메서드를 활용한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> arrWrap = arr1.<span class="title function_">concat</span>(arr2, arr3);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrWrap); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><p>arr1 배열에 concat 메서드를 사용하여, 배열 arr2와 arr3를 배열에 이어붙였다.</p><h3 id="ES6-배열-내용-조합"><a href="#ES6-배열-내용-조합" class="headerlink" title="ES6 배열 내용 조합"></a>ES6 배열 내용 조합</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> arrWrap = [...arr1, ...arr2, ...arr3];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrWrap); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><p>전개연산자를 활용하여 새로운 배열을 만들었다. concat 메서드를 사용한 코드보다 간결하고, 가독성도 개선되었다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const arr = [4, 5, 6];</span><br><span class="line">const arrWrap = [1, 2, 3, ...arr, 7, 8, 9]</span><br><span class="line"></span><br><span class="line">console.log(arrWrap); // [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure><p>concat 메서드는 인자로 전달받은 값 순으로 기존 배열 끝에서부터 값을 추가하지만, 전개연산자는 위처럼 배열의 아무 곳에나 추가 할 수 있다.</p><h2 id="전개연산자로-할당하면-2차원-형태가-되지-않는다"><a href="#전개연산자로-할당하면-2차원-형태가-되지-않는다" class="headerlink" title="전개연산자로 할당하면 2차원 형태가 되지 않는다."></a>전개연산자로 할당하면 2차원 형태가 되지 않는다.</h2><p>배열의 경우<br>concat 메서드로 새로운 배열을 만들어내는 것이 아닌, 기존 배열 요소에 값을 추가한다면 push 메서드를 사용할 것이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr1.<span class="title function_">push</span>(arr2);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// [1, 2, 3, [4, 5]]</span></span><br><span class="line">arr1 배열에 arr2 배열을 할당했지만 arr2 배열 전체가 들어가 <span class="number">2</span>차원 배열이 되었다. 이 경우 기존 자바스크립트에서는 배열 객체의 프로토타입 매서드인 push.<span class="property">apply</span>를 사용해야 한다.</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const arr1 = [1, 2, 3];</span><br><span class="line">const arr2 = [4, 5];</span><br><span class="line">Array.prototype.push.apply(arr1, arr2);</span><br><span class="line"></span><br><span class="line">console.log(arr1); // [1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure><p>원하는 결과를 얻었지만 코드가 복잡하다. 하지만 전개연산자를 활용하면 쉽게 구현이 가능하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr1.<span class="title function_">push</span>(...arr2);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="객체의-경우"><a href="#객체의-경우" class="headerlink" title="객체의 경우"></a>객체의 경우</h3><p>객체의 경우도 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="string">&#x27;B&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">c</span>: <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">  <span class="attr">d</span>: <span class="string">&#x27;D&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> objWrap = &#123;obj1, obj2&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objWrap);</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">obj1</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="string">&#x27;B&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">obj2</span>: &#123;</span><br><span class="line">    <span class="attr">c</span>: <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">    <span class="attr">d</span>: <span class="string">&#x27;D&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>obj1 객체와 obj2 객체를 하나의 objWrap 객체로 묶으면 객체 각각의 값이 아닌, 객체 자체가 들어가 2차원 객체가 되었다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="string">&#x27;B&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">c</span>: <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">  <span class="attr">d</span>: <span class="string">&#x27;D&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> objWrap = &#123;...obj1, ...obj2&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objWrap);</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">  <span class="attr">d</span>: <span class="string">&#x27;D&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>전개연산자를 사용하면 객체 자체가 할당되는 것이 아닌, 각각의 값이 할당 된다.</p><h2 id="전개연산자를-이용한-복사에는-1차원에서만-유효하다"><a href="#전개연산자를-이용한-복사에는-1차원에서만-유효하다" class="headerlink" title="전개연산자를 이용한 복사에는 1차원에서만 유효하다."></a>전개연산자를 이용한 복사에는 1차원에서만 유효하다.</h2><p>위에서 전개연산자로 할당하면 2차원 배열이 되지 않는다고 했다. 하지만 2차원 이상의 배열을 할당할 땐 1차원 요소만 같은 1차원 레벨로 할당이 되고 2차원 이상의 배열은 그대로 들어간다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">4</span>, <span class="number">5</span>, [<span class="number">6</span>, <span class="number">7</span>]];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, ...arr1];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">// [1, 2, 3, 4, 5, [6, 7]]</span></span><br></pre></td></tr></table></figure><p>기존 배열을 보존해야 할 때 유용하다.<br>ES5 배열 요소를 역순으로 변경<br>전개연산자는 원본 배열을 그대로 유지하면서 새로운 배열을 만든다. 예를 들어 reverse 메서드는 배열의 각 요소를 역순으로 바꾸는 메서드인데, 기존 배열도 바꿔버리는 단점이 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = arr1.<span class="title function_">reverse</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// [3, 2, 1]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure><p>원본 배열을 수정할 의도가 있었으면 문제가 되지 않지만, 원본 배열은 그대로 두고 배열 요소의 순서를 뒤집은 새로운 배열이 필요하다면 상황이 복잡해진다. 이 상황에서 전개연산자를 사용하면 편리해진다.</p><h3 id="ES6-배열-요소를-역순으로-변경"><a href="#ES6-배열-요소를-역순으로-변경" class="headerlink" title="ES6 배열 요소를 역순으로 변경"></a>ES6 배열 요소를 역순으로 변경</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const arr1 = [1, 2, 3];</span><br><span class="line">const arr2 = [...arr1].reverse();</span><br><span class="line"></span><br><span class="line">console.log(arr1); // [1, 2, 3]</span><br><span class="line">console.log(arr2); // [3, 2, 1]</span><br></pre></td></tr></table></figure><p>원본 배열은 그대로 유지하면서 새로운 배열을 만들었다.</p><h2 id="배열의-나머지-요소를-할당할-수-있다"><a href="#배열의-나머지-요소를-할당할-수-있다" class="headerlink" title="배열의 나머지 요소를 할당할 수 있다."></a>배열의 나머지 요소를 할당할 수 있다.</h2><p>비구조화 할당과 전개연산자를 사용하여 배열의 나머지 요소를 할당 받을 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [first, second, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(second); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rest); <span class="comment">// [3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>변수 first과 second의 각각의 인덱스 값에 맞는 값이 차례로 들어가고(1, 2), rest에는 할당 받지 못한 나머지 값들이 대입된다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://blog.naver.com/zoz0312/221622159150">[JavaScript] 전개연산자 ( Spread Operator )</a></p></blockquote><blockquote><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax">전개 구문</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;정의&quot;&gt;&lt;a href=&quot;#정의&quot; class=&quot;headerlink&quot; title=&quot;정의&quot;&gt;&lt;/a&gt;정의&lt;/h2&gt;&lt;p&gt;ECMAScript6(2015)에서 새로 추가된 전개연산자(Spread Operator)란 객체나 배열의 값을 하나 하나 넘기</summary>
      
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>hoisting 개념에 따른 각 변수 선언의 차이점</title>
    <link href="http://example.com/2022/09/17/[JavaScript]%08var,let,const%EC%9D%98%20%EC%B0%A8%EC%9D%B4%EC%A0%90%EA%B3%BC%20hoisting/"/>
    <id>http://example.com/2022/09/17/[JavaScript]%08var,let,const%EC%9D%98%20%EC%B0%A8%EC%9D%B4%EC%A0%90%EA%B3%BC%20hoisting/</id>
    <published>2022-09-17T07:54:00.000Z</published>
    <updated>2022-10-13T08:28:05.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="변수-선언-var-let-const의-차이"><a href="#변수-선언-var-let-const의-차이" class="headerlink" title="변수 선언 var, let const의 차이"></a>변수 선언 var, let const의 차이</h2><p>변수를 선언할 때 var, let, const 로 할 수 있다. var 는 초창기 문법이고 ES6에서 let과 const가 추가 되었다. var의 경우 재선언, 재할당을 할 수 있으며 let은 재할당은 가능하나, 재선언은 불가능하다. const는 재선언, 재할당이 모두 불가능하다. 따라서 var의 경우 재선언이 가능하므로 변수명 중복 등 개발자 입장에서 error prone해지며 지양해야하는 코드라고 볼 수 있다.</p><p>또한 var의 경우 block scope밖에서 접근이 가능하지만(함수 제외, if문과 for문 등에서 접근 가능하다.) let과 const는 block scope 밖에서 접근이 불가능하다. 이제 var, let const를 hoisitng과 연관지어 차이점을 알아보자.</p><h2 id="hoistig이란"><a href="#hoistig이란" class="headerlink" title="hoistig이란?"></a>hoistig이란?</h2><p>hoisitng은 함수 선언식과 변수선언이 최상단에 끌어올려지는 것을 말한다. hoisitng는 JS 동작 그 자체이며, 자바스크립트 엔진은 함수선언문 &gt; 변수 선언 &gt; 코드실행 순으로 진행된다.</p><h3 id="1-var"><a href="#1-var" class="headerlink" title="1. var"></a>1. var</h3><p>var로 선언한경우 hoisitng되는 동시에 초기화가 진행된다. 따라서 hoisitng은 되었지만, console.log로 확인해봤을때 undefined가 출력이 된다.</p><h3 id="2-let-const"><a href="#2-let-const" class="headerlink" title="2. let, const"></a>2. let, const</h3><p>let과 const로 선언하는 경우 hoisitng은 되지만 ReferenceError가 나온다.</p><h2 id="TDZ-Temporal-Death-Zone"><a href="#TDZ-Temporal-Death-Zone" class="headerlink" title="TDZ (Temporal Death Zone)"></a>TDZ (Temporal Death Zone)</h2><p>임시적으로 죽어있는 공간. 선언 전에 변수를 사용하는 것을 비허용하는 이 개념상의 공간에 const와 let은 들어간다. 여기서 변수 선언과 할당 초기화 개념의 차이점에 대해 알 필요가 있는데, hoisitng이 되는 것은 변수의 선언만이다. var를 포함한 let, const 모든 선언은 hoisting이 일어난다. 즉 할당전에 console로 출력을 하게 되면 ReferenceError가 나온다. 이는 const와 let 선언이 hoisitng 되어 TDZ에 들어갔음을 의미한다.</p><h2 id="hoisintg과-var-let-const-개념-정리"><a href="#hoisintg과-var-let-const-개념-정리" class="headerlink" title="hoisintg과 var let const 개념 정리"></a>hoisintg과 var let const 개념 정리</h2><p>var let const 의 선언은 hoisitng된다. var의 경우 TDZ에 들어가지 않고 선언 부분만 끌어올려졌기 때문에(hoisting) 할당되기 전까지 undefiend가 출력된다. (hositing과 동시에 초기화 할당한다고 생각할 수도 있다.) 하지만, let const의 경우 hoisting되며 일시적으로 죽어있는 공간(TDZ)에 들어가있기에 할당 전에 접근하려고 할 경우, ReferenceError 로 해당 변수에 참조할 수 없다는 에러가 출력된다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;변수-선언-var-let-const의-차이&quot;&gt;&lt;a href=&quot;#변수-선언-var-let-const의-차이&quot; class=&quot;headerlink&quot; title=&quot;변수 선언 var, let const의 차이&quot;&gt;&lt;/a&gt;변수 선언 var, let c</summary>
      
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="hoisting" scheme="http://example.com/tags/hoisting/"/>
    
  </entry>
  
  <entry>
    <title>2nd project WnB</title>
    <link href="http://example.com/2022/09/08/2%EC%B0%A8%20project%20%ED%9A%8C%EA%B3%A0/"/>
    <id>http://example.com/2022/09/08/2%EC%B0%A8%20project%20%ED%9A%8C%EA%B3%A0/</id>
    <published>2022-09-08T10:00:00.000Z</published>
    <updated>2022-10-18T08:59:40.740Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2차-project-회고"><a href="#2차-project-회고" class="headerlink" title="2차 project 회고"></a>2차 project 회고</h2><style>p > img {  width: 400px;}</style><p><img src="/../images/WnB.jpeg" alt="우솝팀"></p><p><strong>2차 project : 2022.8.29 - 2022.9.8 위앤비팀</strong></p><h2 id="프로젝트-시작"><a href="#프로젝트-시작" class="headerlink" title="프로젝트 시작"></a>프로젝트 시작</h2><p>2차 프로젝트가 시작되었다. 1차 프로젝트때의 아쉬웠던 점 (웹사이트의 기능이 부족했다..!) 미비했던 점(팀원간의 소통이 부족했다..!)을 보완하면서 기능적으로 완성된 웹사이트를 만들고 싶었다.<br>우리가 클론할 웹 사이트는 에어비앤비였고 위 사이트는 유저페이지와 호스트 페이지가 나뉘어져 있어 1차보다 기능적으로 구현해야 할 사항들이 많았다.<br>프론트4명, 백엔드3명 총 7명의 위앤비 팀원과 함께 프로젝트를 시작하였다.</p><h2 id="기획"><a href="#기획" class="headerlink" title="기획"></a>기획</h2><p>첫날은 먼저 플로우 차트를 그려보았다. 구현해야 할 사항과, 추가 구현으로 할 사항을 나누고 백엔드분들이 어떤 형식으로 데이터를 주실지, 어떤 식으로 구현할지<br>차트를 그려보고 그때그때 궁금한 사항이나 확인해야 할 사항을 모두 확인하였다.<br>첫날 백엔드 근우님께서 플로우차트를 그리는 것을 제시하고 주도적으로 이끌어 주었는데, 이때 작성했던 플로우 차트가 막히는 것 없이 사이트 구현에만 집중할 수 있게 한 큰 힘이 되었다.<br>결론적으로 우리는 유저 페이지와 호스트 페이지를 모두 구현하는 것으로 목표를 잡았고, 카카오 로그인, 무한스크롤, 무한슬라이드, 달력, 지도, 예약 으로 백엔드 3명, 프론트4명이 하기에는<br>10일이라는 다소 짧은 기간에 벅찰 수 있지만 할 수 있는 데까지 해보자며 도전을 하였다.</p><h3 id="1주차"><a href="#1주차" class="headerlink" title="1주차"></a>1주차</h3><p>플로우 차트를 그린 후 역할 분담을 하였다. 나는 main페이지와 사이트내 공통으로 들어갈 슬라이드 footer를 구현하기로 했다.<br>메인 페이지의 경우 데이터를 통신으로 받아온 후 map 함수로 뿌려주는데 에어비앤비의 경우에는 위도,경도를 받은 데이터로 km 를 UI에 넣어 구현해야 했기에<br>선릉역을 기준으로 km를 구하는 함수를 따로 작성해야 했다. 또 에어비앤비에 각 숙소정보에 들어갈 여러장의 사진을 무한 슬라이드로 구현하고, 사이트 내 무한 스크롤을 구현하는 것이<br>메인 페이지의 주요 기능이었다. 옵션으로 슬라이드 푸터도..!<br>다행이도 2일차에 API 명세서를 받아볼 수 있었고 어떤 형식으로 데이터를 받을지, key값은 뭔지? 미리 알수 있었기에 mock data를 그대로 짜고 코드를 짜는 것이 수월했다.<br>생각보다 빠른 시간내에 UI 구현이 완료되었고 다행히 통신도 비교적 원활하게 마무리 되었다..! 다만, 이번 프로젝트의 과제가 있다면 css부분을 style component로 구현해야 하는 것이었는데 처음 사용해보는거라 다소 생소하기도 했고, 매번 이름을 지어주는것도 꽤나 고심하는 시간이 필요했다.</p><h3 id="2주차"><a href="#2주차" class="headerlink" title="2주차"></a>2주차</h3><p>2주차에는 git rebase라는 것을 하였는데(이것도 과제..) 문제가 이 rebase의 경우 충돌이 쉽게 일어날 수가 있고 만약 너무 꼬여버려서 되돌리지 못할 경우엔 새롭게 클론을 하고 다시 새로운 branch를 만들어 pr을 다시 작성하고 멘토님의 리뷰도 다시 받아야 한다고 했다. 그런데… 내가 그렇게 될줄은 몰랐다…! 처음 해보는 git rebase가 꼬여버려서 시간을 많이 소요하였고 결론적으로 새로 clone을 하여 작업을 다시 해야 했다. 원활하게 가고 있다 생각했는데 예상치 못하게 시간이 여유롭지 못한 상황에서 2주차에 다시 클론을 해야하는 상황이 생기자 살짝 멘탈이 흔들릴뻔 했지만 좋은 팀원분들 덕분에 (git rebase 꼬인 것을 많이 도와주시려고 했다 정말로 무한 감사..)UI 작업과 통신까지 잘 마무리 할 수 있었다.<br>프로젝트 마지막 쯔음에 모두 작업한 것을 최종적으로 merge 했을때 css 가 깨지고 갑자기 잘 되던 통신이 안되는 부분도 있었지만 팀원 한명이 모두 전담하여 이끄는 것이 아니라, 로테이션으로 깨지는 부분들을 해결하고 의논했던 부분도 팀원분들의 배려가 느껴져서 감사했다.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/4i2Bv78AlmY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h3><p>기획헸던 바대로 메인페이지 무한스크롤 슬라이드 푸터 사진 무한 슬라이드 호스트페이지 예약기능 캘린더 달력 지도 모두 구현할 수 있었다. 프로젝트 시연때도 영상이 아닌 실제 구현한 사이트를 그대로 소개할 정도로 통신도 원활했다.</p><h3 id="마지막-회고"><a href="#마지막-회고" class="headerlink" title="마지막 회고"></a>마지막 회고</h3><p>2차 프로젝트는 좀 더 많은 기능들을 구현할 수 있어 좋았고, git rebase가 꼬이지 않았다면 좀 더 많은 부분들을 구현했을텐데 그러지 못한 점이 아쉬웠다. 프로젝트는 기획한대로 흘러간 적이 없는 것 같다. 하지만 그런 상황에 좋은 팀원분들이 있어 끝까지 잘 마무리 할 수 있었고, 개발을 공부할수록 개발자가 되는 것이 얼마나 어려운 일인지, 또 얼마나 공부해야할 것이 많고 내가 부족한 것이 많은지 역설적으로 더 깨닫게 되는 것 같다. 그래도 코딩하는건 정말 재밌고 잘하고 싶다. 프론트엔드 개발자가 정말 되고 싶다. 이렇게 2차 프로젝트도 마무리!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2차-project-회고&quot;&gt;&lt;a href=&quot;#2차-project-회고&quot; class=&quot;headerlink&quot; title=&quot;2차 project 회고&quot;&gt;&lt;/a&gt;2차 project 회고&lt;/h2&gt;&lt;style&gt;
p &gt; img {
  width: 40</summary>
      
    
    
    
    
    <category term="teamproject" scheme="http://example.com/tags/teamproject/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 자바스크립트 클로저</title>
    <link href="http://example.com/2022/09/01/%ED%81%B4%EB%A1%9C%EC%A0%80/"/>
    <id>http://example.com/2022/09/01/%ED%81%B4%EB%A1%9C%EC%A0%80/</id>
    <published>2022-09-01T03:00:59.000Z</published>
    <updated>2022-10-19T08:42:55.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><p>중첩함수에서 내부함수가 외부함수의 환경을 기억하는것을 클로저라고 한다.</p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> foo = <span class="string">&quot;data&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> foo;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>func라는 함수를 선언하고 foo변수에 ‘data’문자열을 추가한 뒤 foo변수를 리턴하는 익명함수를 선언하였다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> closure = <span class="title function_">func</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">closure</span>());</span><br><span class="line"><span class="comment">// &#x27;data&#x27;</span></span><br></pre></td></tr></table></figure><p>func함수의 리턴값을 closure변수에 할당한 뒤 closure를 실행한 값을 콘솔로 찍어보았다. 결과는 ‘data’라는 문자열이 출력되었다. func의 지역변수로 있는 foo는 func함수가 끝나면서 소멸되어야하지만 값을 잃지 않고 ‘data’값을 가지고 있다. 이 현상을 클로저라 한다. 다른 구문도 살펴보겠다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> closure = <span class="title function_">count</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">closure</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">closure</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">closure</span>());</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>count함수의 지역변수인 num값이 소멸되지 않고 계속 카운트되는 것을 확인해 볼 수 있다.</p><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><h3 id="변수의-은닉화"><a href="#변수의-은닉화" class="headerlink" title="변수의 은닉화"></a>변수의 은닉화</h3><p>자바스크립트에서는 인스턴스를 생성할때 Private Variables에 대한 접근 권한 문제가 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Create</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Create</span>(<span class="string">&quot;민수&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">_name</span>);</span><br><span class="line"><span class="comment">// 민수</span></span><br></pre></td></tr></table></figure><p>위에서 생성된 obj객체의 *name프로퍼티는 변수명 앞에 *를 포함하였기 때문에 Private Variables로 쓰고싶다는 의도를 알 수 있다. 하지만 _name프로퍼티는 동적으로 변경될 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">_name</span> = <span class="string">&quot;인성&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">_name</span>);</span><br><span class="line"><span class="comment">// 인성</span></span><br></pre></td></tr></table></figure><p>이 경우 클로저를 사용하여 외부에서 내부변수에 접근하는것을 제한할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _name = name;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(_name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hello = <span class="title function_">create</span>(<span class="string">&quot;민수&quot;</span>);</span><br><span class="line"><span class="title function_">hello</span>();</span><br><span class="line"><span class="comment">// 민수</span></span><br></pre></td></tr></table></figure><p>여기서는 외부에서 _name에 접근할 방법이 전혀 없다. 이렇게 클로저를 활용하여 은닉화를 해결할 수 있다.</p><h3 id="고유한-환경"><a href="#고유한-환경" class="headerlink" title="고유한 환경"></a>고유한 환경</h3><p>클로저는 고유한 환경을 가지고 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> txt = name;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> txt;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> closure01 = <span class="title function_">func</span>(<span class="string">&quot;민수&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> closure02 = <span class="title function_">func</span>(<span class="string">&quot;인성&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> closure03 = <span class="title function_">func</span>(<span class="string">&quot;한나&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">closure01</span>()); <span class="comment">// 민수</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">closure02</span>()); <span class="comment">// 인성</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">closure03</span>()); <span class="comment">// 한나</span></span><br></pre></td></tr></table></figure><p>위의 구문을 보면 txt변수가 동적으로 변화하는 것처럼 보이지만, 실제로는 txt변수 자체가 여러번 생성된 것이다. 즉, closure01(), closure02(), closure03()은 서로 다른 환경을 가지고 있다. 서로 다른 환경을 가지고 있다는것은 그만큼 메모리면에서 큰 비효율을 낳는다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Func</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = input;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">get</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">set</span> = <span class="keyword">function</span> (<span class="params">rename</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = rename;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Func</span>(<span class="string">&quot;민수&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">get</span>());</span><br></pre></td></tr></table></figure><p>위 코드는 생성자함수를 사용하여 인스턴스를 생성하는 구문인데, 클로저가 두번(get, set)이나 생성되었다. 이 상태에서 인스턴스를 계속 만들면 같은일을 하는 클로저가 중복으로 생성되고 메모리낭비가 심해질 것이다.<br>따라서 클로저는 객체의 prototype안에 저장함으로써 같은 기능을 모든 인스턴스가 공유하는 형태로 코드를 만들어야한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Func</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = input;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Func</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Func</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">set</span> = <span class="keyword">function</span> (<span class="params">rename</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = rename;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Func</span>(<span class="string">&quot;민수&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">get</span>());</span><br></pre></td></tr></table></figure><p>이렇게 prototype안에 클로저를 넣으면, 인스턴스가 생성되더라도 중복으로 메모리를 낭비하지 않고, 생성자 내부의 prototype안의 클로저를 참조하기 때문에 메모리낭비를 방지할 수 있다.</p><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><ul><li>클로저는 독립적인(자유) 변수를 가리키는 함수 또는 클로저 안에 정의된 내부함수는 만들어진 환경을 기억한다.</li><li>클로저는 외부함수의 스코프 영역에 접근할 수 있고, 그것을 기억하고 있어야 한다.</li><li>외부함수가 종료된 후에도 내부함수는 외부함수를 계속 참조하고 있어야 한다.</li><li>데이터의 캡슐화 및 정보은닉에도 사용 가능하다.</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://hyunseob.github.io/2016/08/30/javascript-closure/">JavaScript 클로저(Closure)</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;정의&quot;&gt;&lt;a href=&quot;#정의&quot; class=&quot;headerlink&quot; title=&quot;정의&quot;&gt;&lt;/a&gt;정의&lt;/h2&gt;&lt;p&gt;중첩함수에서 내부함수가 외부함수의 환경을 기억하는것을 클로저라고 한다.&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="closure" scheme="http://example.com/tags/closure/"/>
    
  </entry>
  
  <entry>
    <title>1st project woosop</title>
    <link href="http://example.com/2022/08/27/1%EC%B0%A8%20project%20%ED%9A%8C%EA%B3%A0/"/>
    <id>http://example.com/2022/08/27/1%EC%B0%A8%20project%20%ED%9A%8C%EA%B3%A0/</id>
    <published>2022-08-27T10:00:00.000Z</published>
    <updated>2022-10-18T09:00:55.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1차-project-회고"><a href="#1차-project-회고" class="headerlink" title="1차 project 회고"></a>1차 project 회고</h2><p><img src="/../images/ussopteam.jpeg" alt="우솝팀"></p><p><strong>1차 project : 2022.8.16 - 2022.8.26 우솝팀</strong></p><h2 id="프로젝트-시작"><a href="#프로젝트-시작" class="headerlink" title="프로젝트 시작"></a>프로젝트 시작</h2><p>첫 프로젝트를 시작한다는 생각에 설렘 반, 걱정 반으로 시작하였다. 개발 공부는 늘 집에서만 혼자 UI를 만들면서 해왔는데 팀원들과 웹 사이트를 함께 구현 한다는 생각에 설레기도 했고 백엔드와의 데이터 통신 경험이 없었기에, 팀원들에 비해 내가 부족하진 않을지, 잘 따라가지 못해 민폐가 되진 않을지 하는 걱정으로 틈틈이 usefarams, 쿼리스트링의 문법을 공부하며 걱정 하는 마음 반으로 프로젝트를 시작하였다.</p><h2 id="기획"><a href="#기획" class="headerlink" title="기획"></a>기획</h2><p>1차 프로젝트는 총 13일의 시간이 주어졌다.<br>첫 날 멘토님의 참관 아래 이솝 웹페이지 클론의 방향성에 대해 논의하였다. 첫 프로젝트인 만큼 기능 구현 측면 보다는, 기본적인 통신 및 팀원들과의 협업을 통한 전체적인 UI 구현에 초점이 맞춰졌다. 또한 원활한 소통을 위해 매일 아침마다 스탠드업 미팅을 진행하면서 서로의 진행 상황 및 힘든 점을 공유하고자 했다.</p><h3 id="1주차"><a href="#1주차" class="headerlink" title="1주차"></a>1주차</h3><p>프론트엔드 3명과 백엔드 3명 나뉘어 각자 역할분담을 하였다. 우선 FE 쪽에서는 첫주 동안 UI를 모두 완성시킨 후 merge하는 것을 목표로 했다. 결과적으로 기획했던 것보다 각자 더 많은 UI를 구현해 왔던 점은, 우리 모두 각자 맡은 것에 최선을 다했다는 점에서 정말 잘한 점인 것 같으나, 지금 생각해보면 여기서 약간의 미스가 있었다. 백엔드와의 소통을 충분히 하지 못했던 점이다. UI는 모두 완성시켰으나 정작 중요한 데이터 통신에 있어서 데이터 형태를 충분히 논의하지 못했다. 게다가 둘째 날부터 FE에 1명, BE 1명씩 확진이 되어 온라인으로 소통을 하다보니 즉각적인 소통이 어려운 점도 있었다.<br>리액트를 사용했기에 미리 mock data를 만들면서 개별적으로 몇 번 백엔드 팀원분들에게 물어 보기는 했지만 명확한 답변을 얻지 못한 채로 첫 주가 지나갔다.</p><h3 id="2주차"><a href="#2주차" class="headerlink" title="2주차"></a>2주차</h3><p>2주차 수요일부터 모든 팀원이 처음으로 오프라인으로 만날 수 있었다. 그동안은 zoom으로 최소 하루2번은 화상회의를 진행했는데, 40분이 최대이다 보니 처음으로 시간 제한이 없는 게더라는 플랫폼을 사용하여 회의를 진행하고 팀원들과의 원활한 소통을 하고자 노력했다. 수요일 이후 데이터 통신을 시작했는데, API 명세서가 없어서 즉각적으로 코드를 작성하고 통신을 하다 보니 생각치 못한 오류가 많았다. 또한 프엔-백엔끼리의 개별적 소통이 전체적으로 공유되지가 않아, 받은 데이터 형식이 많이 달랐다. 이를 보완하고자 많을때는 하루에 5번의 회의를 하기도했다. 또 회의내용을 기록하는 서기를 한명 지정하여, 트렐로에 진행사항, 기획 및 회의내용을 기록하여 원활한 소통을 위해 노력했다. 첫 프로젝트이다 보니 정말 많은 우여곡절이 있었던 프로젝트 였다.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/n2kL24FnHsE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h3><p>발표 직전까지도 fe에서는 css를 수정하면서 로그인&#x2F;회원가입 기능, 장바구니 추가 기능, 메인페이지, 제품리스트페이지, 상세페이지 데이터 통신까지 마무리 하였다.<br>첫 프로젝트를 진행하며 느낀 점은 코딩 실력은 기본이고 팀원끼리의 소통이 정말 중요하다고 느꼈다. 백엔드에서 어떤 형태로 데이터를 받아올지 충분한 논의가 없었던 것이 소통에 많은 시간을 지연시켰고 (코드 수정 및 즉각적으로 코드를 치고 반영해야 하는 경우가 많았고 이로 인해 에러가 많이 발생했다) 프론트 엔드끼리와의 소통도 정말 중요하다고 느꼈다. 프론트 엔드 끼리는 각자 맡은 UI를 구현하면 된다고 단순히 생각했었는데, 팀원 모두가 잘하고자 하는 욕심이 있다보니 어디까지 구현을 할지 충분한 논의가 필요했고, 개별적으로 백엔드와 소통한 경우에는 프론트엔드끼리의 전체 공유가 되어야 했는데 이점이 많이 미숙했던 것 같다.</p><h3 id="마지막-회고"><a href="#마지막-회고" class="headerlink" title="마지막 회고"></a>마지막 회고</h3><p>프로젝트에 있어서 가장 중요한 점은 소통인 것 같다. 우리 팀원들은 각자 모두가 열심히 하는 분들이라 서로 맡은 바 최선을 다해 결과적으로 좋은 결과물이 나왔던 것 같다. 소통을 하기 위해 아침, 저녁으로 매일 회의를 진행하고 트렐로로 사용하여 실시간으로 공유하고자 했지만 정작 중요한 백엔드와의 데이터 형식의 명확한 소통, 그리고 개별적으로 백엔드와 소통한 점에 대해 프론트 엔드끼리의 전체 공유가 미숙했던 것 같다. 하지만 1차 프로젝트를 계기로 함께 일하는 팀원으로써 무엇이 가장 중요한지 깨달았고 스스로 많이 되돌아볼 수 있는 시간이었다! 이렇게 1차 프로젝트 우솝팀은 마무리! 정말 소중한 경험으로 기억될 것 같다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1차-project-회고&quot;&gt;&lt;a href=&quot;#1차-project-회고&quot; class=&quot;headerlink&quot; title=&quot;1차 project 회고&quot;&gt;&lt;/a&gt;1차 project 회고&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/../images/ussop</summary>
      
    
    
    
    
    <category term="teamproject" scheme="http://example.com/tags/teamproject/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Fetch API</title>
    <link href="http://example.com/2022/08/12/[JavaScript]%08fetch/"/>
    <id>http://example.com/2022/08/12/[JavaScript]%08fetch/</id>
    <published>2022-08-12T03:00:59.000Z</published>
    <updated>2022-10-19T08:32:42.491Z</updated>
    
    <content type="html"><![CDATA[<p>자바스크립트의 fetch 함수는 비동기 통신 API로써 서버에 네트워크 요청을 보내 새로운 정보를 받아올 수 있다. ES6부터 지원하며, 가독성이 매우 뛰어난 장점이 있다. 이곳을 클릭하면 {“message”: “hello world”}라는 JSON 데이터 화면이 나온다. fetch API를 이용해 이 JSON을 가져와 보자.</p><h2 id="기본-형태"><a href="#기본-형태" class="headerlink" title="기본 형태"></a>기본 형태</h2><p>fetch API의 기본 형태는 아래와 같다.</p><figure class="highlight java"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, [options])</span><br><span class="line">  .then((res) =&gt; res.json())</span><br><span class="line">  .then((res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// data를 응답 받은 후 로직</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>url에는 접근하고자 경로를 넣으면 된다.</li><li>options에는 method나 header등을 지정하여 요청할 수 있다.</li><li>options에 아무값도 넘기지 않으면 요청은 GET 메서드로 진행된다.</li></ul><p>화살표 함수를 함수 선언식으로 변경하면 아래와 같다.</p><figure class="highlight java"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, [options])</span><br><span class="line">  .then(function(res) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.json();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function(res) &#123;</span><br><span class="line">    <span class="comment">// data를 응답 받은 후 로직</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>위에서 언급한 주소를 입력하여 JSON 데이터를 잘 가져오는지 확인해 본다.</p><h2 id="요청-하기"><a href="#요청-하기" class="headerlink" title="요청 하기"></a>요청 하기</h2><figure class="highlight java"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;https://recordboy.github.io/ui/dummy/data.json&#x27;</span>)</span><br><span class="line">  .then(function(res) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Response Object</span></span><br><span class="line">    console.log(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 응답값 JSON 형태로 얻기</span></span><br><span class="line">    <span class="keyword">return</span> res.json();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function(res) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 리턴 받은 JSON</span></span><br><span class="line">    console.log(res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>응답값은 첫번째 then에 지정된 함수의 res에 담겨지며, 이 값은 http 응답값을 가지고 있는 Response Object이다.</li><li>첫번째 then의 응답값을 JSON 형태로 얻기 위해 Response Object의 json() 함수를 호출하여 값을 리턴한다.</li><li>두번째 then에서 응답 받은 JSON을 확인할 수 있다.</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://yeri-kim.github.io/posts/fetch/#fetch-%ED%95%A8%EC%88%98-%EA%B8%B0%EB%B3%B8">fetch() 함수 사용법</a></p></blockquote><blockquote><p><a href="https://m.blog.naver.com/dndlab/221783285664">Javascript에서의 비동기 통신</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;자바스크립트의 fetch 함수는 비동기 통신 API로써 서버에 네트워크 요청을 보내 새로운 정보를 받아올 수 있다. ES6부터 지원하며, 가독성이 매우 뛰어난 장점이 있다. 이곳을 클릭하면 {“message”: “hello world”}라는 JS</summary>
      
    
    
    
    <category term="React" scheme="http://example.com/categories/React/"/>
    
    
    <category term="fetch" scheme="http://example.com/tags/fetch/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 비구조화 할당(Destructuring Assignment)</title>
    <link href="http://example.com/2022/08/03/[JavaScript]%08%EB%B9%84%EA%B5%AC%EC%A1%B0%ED%99%94%ED%95%A0%EB%8B%B9/"/>
    <id>http://example.com/2022/08/03/[JavaScript]%08%EB%B9%84%EA%B5%AC%EC%A1%B0%ED%99%94%ED%95%A0%EB%8B%B9/</id>
    <published>2022-08-03T03:00:59.000Z</published>
    <updated>2022-10-18T08:57:15.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><p>ECMAScript6(2015)에서 새로 추가된 비구조화 할당(Destructuring Assignment)이란 배열이나 객체의 속성을 해체하여 그 값을 개별 변수에 담을 수 있게 하는 자바스크립트 표현식(expression)이다.</p><h2 id="기본-문법-배열"><a href="#기본-문법-배열" class="headerlink" title="기본 문법(배열)"></a>기본 문법(배열)</h2><figure class="highlight java"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="variable">animalList</span> <span class="operator">=</span> [<span class="string">&quot;CAT&quot;</span>, <span class="string">&quot;DOG&quot;</span>, <span class="string">&quot;TIGER&quot;</span>];</span><br><span class="line"><span class="type">const</span> <span class="variable">cat</span> <span class="operator">=</span> animalList[<span class="number">0</span>];</span><br><span class="line"><span class="type">const</span> <span class="variable">dog</span> <span class="operator">=</span> animalList[<span class="number">1</span>];</span><br><span class="line"><span class="type">const</span> <span class="variable">tiger</span> <span class="operator">=</span> animalList[<span class="number">2</span>];</span><br><span class="line">console.log(cat); <span class="comment">// CAT</span></span><br><span class="line">console.log(dog); <span class="comment">// DOG</span></span><br><span class="line">console.log(tiger); <span class="comment">// TIGER</span></span><br></pre></td></tr></table></figure><p>animalList는 “CAT”, “DOG”, “TIGER” 값을 가지고 있는 배열이다. 이 배열의 값을 각각 변수에 할당 하려면 위처럼 각각 하나씩 지정해 줘야 한다. 번거로운 작업이며, 코드도 복잡해보이는 단점이 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [cat, dog, tiger] = [<span class="string">&quot;CAT&quot;</span>, <span class="string">&quot;DOG&quot;</span>, <span class="string">&quot;TIGER&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat); <span class="comment">// CAT</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog); <span class="comment">// DOG</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tiger); <span class="comment">// TIGER</span></span><br></pre></td></tr></table></figure><p>비구조화 할당을 이용하면 위처럼 간단하게 작성할 수 있다. 좌항이 호출될 변수명 집합, 우항이 할당할 값이다. 좌항의 각 요소에는 같은 index를 가지는 배열값이 할당된다.</p><h3 id="나머지-패턴"><a href="#나머지-패턴" class="headerlink" title="나머지 패턴"></a>나머지 패턴</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [cat, ...rest] = [<span class="string">&quot;CAT&quot;</span>, <span class="string">&quot;DOG&quot;</span>, <span class="string">&quot;TIGER&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat); <span class="comment">// CAT</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rest); <span class="comment">// [&quot;DOG&quot;, &quot;TIGER&quot;]</span></span><br></pre></td></tr></table></figure><p>전개연산자(…)를 활용하면 좌항에서 명시적으로 할당되지 않는 나머지 배열 값을 사용할 수 있다.</p><h2 id="기본-문법-객체"><a href="#기본-문법-객체" class="headerlink" title="기본 문법(객체)"></a>기본 문법(객체)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animals = &#123;</span><br><span class="line">  <span class="attr">cat</span>: <span class="string">&quot;CAT&quot;</span>,</span><br><span class="line">  <span class="attr">dog</span>: <span class="string">&quot;DOG&quot;</span>,</span><br><span class="line">  <span class="attr">tiger</span>: <span class="string">&quot;TIGER&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> cat = animals.<span class="property">cat</span>;</span><br><span class="line"><span class="keyword">const</span> dog = animals.<span class="property">dog</span>;</span><br><span class="line"><span class="keyword">const</span> tiger = animals.<span class="property">tiger</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat); <span class="comment">// CAT</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog); <span class="comment">// DOG</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tiger); <span class="comment">// TIGER</span></span><br></pre></td></tr></table></figure><p>객체도 배열과 마찬가지로 일일히 값을 따로 넣어주려면 번거롭다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; cat, dog, tiger &#125; = &#123;</span><br><span class="line">  <span class="attr">cat</span>: <span class="string">&quot;CAT&quot;</span>,</span><br><span class="line">  <span class="attr">dog</span>: <span class="string">&quot;DOG&quot;</span>,</span><br><span class="line">  <span class="attr">tiger</span>: <span class="string">&quot;TIGER&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat); <span class="comment">// CAT</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog); <span class="comment">// DOG</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tiger); <span class="comment">// TIGER</span></span><br></pre></td></tr></table></figure><p>위와 같이 작성하면 비구조화 할당을 수행하며, 배열의 경우 좌항의 index값에 값에 할당되었다면, 객체는 같은 key에 있는 값이 담긴다.</p><h3 id="나머지-패턴-1"><a href="#나머지-패턴-1" class="headerlink" title="나머지 패턴"></a>나머지 패턴</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; cat, ...rest &#125; = &#123;</span><br><span class="line">  <span class="attr">cat</span>: <span class="string">&quot;CAT&quot;</span>,</span><br><span class="line">  <span class="attr">dog</span>: <span class="string">&quot;DOG&quot;</span>,</span><br><span class="line">  <span class="attr">tiger</span>: <span class="string">&quot;TIGER&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat); <span class="comment">// CAT</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rest); <span class="comment">// &#123;dog: &quot;DOG&quot;, tiger: &quot;TIGER&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>배열과 마찬가지로 객체도 나머지 패턴이 있다.</p><h3 id="원래의-key-대신-다른-변수명-사용"><a href="#원래의-key-대신-다른-변수명-사용" class="headerlink" title="원래의 key 대신 다른 변수명 사용"></a>원래의 key 대신 다른 변수명 사용</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="attr">cat</span>: catName,</span><br><span class="line">  <span class="attr">dog</span>: dogName,</span><br><span class="line">  ...rest</span><br><span class="line">&#125; = &#123;</span><br><span class="line">  <span class="attr">cat</span>: <span class="string">&quot;CAT&quot;</span>,</span><br><span class="line">  <span class="attr">dog</span>: <span class="string">&quot;DOG&quot;</span>,</span><br><span class="line">  <span class="attr">tiger</span>: <span class="string">&quot;TIGER&quot;</span>,</span><br><span class="line">  <span class="attr">monkey</span>: <span class="string">&quot;MONKEY&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(catName); <span class="comment">// CAT</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dogName); <span class="comment">// DOG</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rest); <span class="comment">// &#123;tiger: &quot;TIGER&quot;, monkey: &quot;MONKEY&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>좌항의 변수에 다른이름으로 사용할 변수명을 대입하면 되며, 나머지 값을 뜻하하는 전개연산자는 우항의 key에 영향을 받지 않으므로 …rest: restName이라는 표현식은 무의미 하며, 에러가 난다.</p><h3 id="우항의-key-값이-변수명으로-사용-불가-경우"><a href="#우항의-key-값이-변수명으로-사용-불가-경우" class="headerlink" title="우항의 key 값이 변수명으로 사용 불가 경우"></a>우항의 key 값이 변수명으로 사용 불가 경우</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="string">&#x27;cat-name&#x27;</span>, <span class="string">&#x27;dog name&#x27;</span> &#125; = &#123;</span><br><span class="line">  <span class="string">&#x27;cat-name&#x27;</span>: <span class="string">&quot;CAT&quot;</span>,</span><br><span class="line">  <span class="string">&#x27;dog name&#x27;</span>: <span class="string">&quot;DOG&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>좌항으로 전달 받는 key 값이 ‘cat-name’같이 사용 불가능한 문자열이 있는 경우 에러를 호출한다. 이럴 경우는 아래와 같은 방식으로 비구조화 할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key = <span class="string">&quot;dog name&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="string">&quot;cat-name&quot;</span>: cat_name, [key]: dog_name &#125; = &#123;</span><br><span class="line">  <span class="string">&quot;cat-name&quot;</span>: <span class="string">&quot;CAT&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dog name&quot;</span>: <span class="string">&quot;DOG&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat_name); <span class="comment">// CAT</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog_name); <span class="comment">// DOG</span></span><br></pre></td></tr></table></figure><p>다만 이 경우 ‘cat-name’과 매칭할 변수명 cat_name을 작성하지 않으면 에러가 발생한다.</p><h3 id="객체-비구조화시-변수-선언-키워드가-없는-경우"><a href="#객체-비구조화시-변수-선언-키워드가-없는-경우" class="headerlink" title="객체 비구조화시 변수 선언 키워드가 없는 경우"></a>객체 비구조화시 변수 선언 키워드가 없는 경우</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cat, dog;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; cat, dog &#125; = &#123; cat: &quot;CAT&quot;, dog: &quot;DOG&quot; &#125; // error</span></span><br><span class="line">(&#123; cat, dog &#125; = &#123; <span class="attr">cat</span>: <span class="string">&quot;CAT&quot;</span>, <span class="attr">dog</span>: <span class="string">&quot;DOG&quot;</span> &#125;); <span class="comment">// 괄호로 감싸줘야 함</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat); <span class="comment">// CAT</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog); <span class="comment">// DOG</span></span><br></pre></td></tr></table></figure><p>객체 비구조화시 변수 선언 키워드가 없을 경우 소괄호를 사용하여 감싸줘야 한다. 감싸주지 않으면 에러가 난다.</p><h2 id="기본값-할당"><a href="#기본값-할당" class="headerlink" title="기본값 할당"></a>기본값 할당</h2><h3 id="배열의-기본값-할당"><a href="#배열의-기본값-할당" class="headerlink" title="배열의 기본값 할당"></a>배열의 기본값 할당</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [cat, dog, tiger] = [<span class="string">&quot;CAT&quot;</span>, <span class="string">&quot;DOG&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat); <span class="comment">// CAT</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog); <span class="comment">// DOG</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tiger); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>비구조화의 범위를 벗어나는 값 할당을 시도하면 undefined를 반환한다. 이럴 경우를 방지하기 위해 아래처럼 호출될 변수명에 기본값을 할당할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [cat, dog, tiger = <span class="string">&quot;TIGER&quot;</span>] = [<span class="string">&quot;CAT&quot;</span>, <span class="string">&quot;DOG&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat); <span class="comment">// CAT</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog); <span class="comment">// DOG</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tiger); <span class="comment">// TIGER</span></span><br></pre></td></tr></table></figure><h3 id="객체의-기본값-할당"><a href="#객체의-기본값-할당" class="headerlink" title="객체의 기본값 할당"></a>객체의 기본값 할당</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  cat,</span><br><span class="line">  dog,</span><br><span class="line">  tiger = <span class="string">&quot;TIGER&quot;</span>,</span><br><span class="line">&#125; = &#123;</span><br><span class="line">  <span class="attr">cat</span>: <span class="string">&quot;CAT&quot;</span>,</span><br><span class="line">  <span class="attr">dog</span>: <span class="string">&quot;DOG&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat); <span class="comment">// CAT</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog); <span class="comment">// DOG</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tiger); <span class="comment">// TIGER</span></span><br></pre></td></tr></table></figure><p>배열과 마찬가지로 객체도 기본값을 지원한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">monkey</span>: monkey_name = <span class="string">&quot;MONKEY&quot;</span> &#125; = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(monkey_name); <span class="comment">// MONKEY</span></span><br></pre></td></tr></table></figure><p>위 코드처럼 객체의 key에 새로운 변수명을 할당하는 방식에도 기본 기본값 할당을 사용할 수 있다.</p><h3 id="복사"><a href="#복사" class="headerlink" title="복사"></a>복사</h3><p>전개연산자를 사용하여 배열, 객체의 깊은 복사를 할 수 있다.</p><h3 id="배열의-깊은-복사"><a href="#배열의-깊은-복사" class="headerlink" title="배열의 깊은 복사"></a>배열의 깊은 복사</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> copy1 = arr;</span><br><span class="line"><span class="keyword">let</span> [...copy2] = arr;</span><br><span class="line"><span class="keyword">let</span> copy3 = [...arr];</span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">&quot;String&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [ &#x27;String&#x27;, 2, 3 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copy1); <span class="comment">// [ &#x27;String&#x27;, 2, 3 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copy2); <span class="comment">// [ 1, 2, 3 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copy3); <span class="comment">// [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure><p>얕은 복사인 copy1은 arr를 참조하기 때문에 0번째 요소가 같이 수정되었지만, 전개연산자를 사용한 copy2와 copy3은 깊은 복사가 되었기 때문에 0번째 요소가 변경되지 않았다.</p><h3 id="객체의-깊은-복사"><a href="#객체의-깊은-복사" class="headerlink" title="객체의 깊은 복사"></a>객체의 깊은 복사</h3><p>객체 역시 전개연산자로 깊은 복사를 사용할 수 있다. 무엇보다 강력한 점은 복사와 함께 새로운 값을 할당할 수 있다는 점이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> prevState = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">  <span class="attr">birth</span>: <span class="string">&quot;1995-01-01&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> state = &#123;</span><br><span class="line">  ...prevState,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">26</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(state); <span class="comment">// &#123;name: &quot;foo&quot;, birth: &quot;1995-01-01&quot;, age: 26&#125;</span></span><br></pre></td></tr></table></figure><p>위와 같이 …prevState를 사용하여 기존 객체를 복사함과 동시에 age에 새로운 값을 할당했다. 리액트의 props나 state처럼 이전 정보를 이용하는 경우 유용하게 사용할 수 있다.</p><h2 id="함수에서의-비구조화-할당"><a href="#함수에서의-비구조화-할당" class="headerlink" title="함수에서의 비구조화 할당"></a>함수에서의 비구조화 할당</h2><p>함수의 파라미터 부분에서도 비구조화 할당을 사용할 수 있다. 이러한 문법은 특히 API 응답값을 처리하는데에 유용하게 사용된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">renderUser</span>(<span class="params">&#123; name, age, addr &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(addr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;kim&quot;</span>, <span class="attr">age</span>: <span class="number">10</span>, <span class="attr">addr</span>: <span class="string">&quot;kor&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;joe&quot;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">addr</span>: <span class="string">&quot;usa&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;miko&quot;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">addr</span>: <span class="string">&quot;jp&quot;</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">users.<span class="title function_">map</span>(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">renderUser</span>(user);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// kim</span></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// kor</span></span><br><span class="line"><span class="comment">// joe</span></span><br><span class="line"><span class="comment">// 20</span></span><br><span class="line"><span class="comment">// usa</span></span><br><span class="line"><span class="comment">// miko</span></span><br><span class="line"><span class="comment">// 30</span></span><br><span class="line"><span class="comment">// jp</span></span><br></pre></td></tr></table></figure><p>users 배열의 map 메서드로 인하여 renderUser 함수에 users의 객체가 각각 전달된다. 각 객체의 key 값이 renderUser함수의 파라미터 받는 부분에서 비구조화 할당을 받았기 때문에 함수 내에서 객체의 key 값을 각각 가져올 수 있게 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;kim&quot;</span>, <span class="attr">age</span>: <span class="number">10</span>, <span class="attr">addr</span>: <span class="string">&quot;kor&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;joe&quot;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">addr</span>: <span class="string">&quot;usa&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;miko&quot;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">addr</span>: <span class="string">&quot;jp&quot;</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">users.<span class="title function_">map</span>(<span class="function">(<span class="params">&#123; name, age, addr &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(addr);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>마찬가지로 위처럼 map 메서드의 파라미터에도 바로 사용할 수 있다.</p><h2 id="for-of-문을-이용한-비구조화-할당"><a href="#for-of-문을-이용한-비구조화-할당" class="headerlink" title="for of 문을 이용한 비구조화 할당"></a>for of 문을 이용한 비구조화 할당</h2><p>배열 내 객체들은 for of 문을 사용하여 비구조화 할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;kim&quot;</span>, <span class="attr">age</span>: <span class="number">10</span>, <span class="attr">addr</span>: <span class="string">&quot;kor&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;joe&quot;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">addr</span>: <span class="string">&quot;usa&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;miko&quot;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">addr</span>: <span class="string">&quot;jp&quot;</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> &#123; <span class="attr">name</span>: n, <span class="attr">age</span>: a &#125; <span class="keyword">of</span> users) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="중첩된-객체-및-배열의-비구조화"><a href="#중첩된-객체-및-배열의-비구조화" class="headerlink" title="중첩된 객체 및 배열의 비구조화"></a>중첩된 객체 및 배열의 비구조화</h2><p>중첩된 객체 및 배열 역시 비구조화가 가능하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> kim = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;kim&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">addr</span>: <span class="string">&quot;kor&quot;</span>,</span><br><span class="line">  <span class="attr">friends</span>: [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;joe&quot;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">addr</span>: <span class="string">&quot;usa&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;miko&quot;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">addr</span>: <span class="string">&quot;jp&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: userName,</span><br><span class="line">  <span class="attr">friends</span>: [, &#123; <span class="attr">name</span>: jpFriend &#125;],</span><br><span class="line">&#125; = kim;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userName); <span class="comment">// kim</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jpFriend); <span class="comment">// miko</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://yuddomack.tistory.com/m/entry/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%AC%B8%EB%B2%95-%EB%B9%84%EA%B5%AC%EC%A1%B0%ED%99%94-%ED%95%A0%EB%8B%B9">자바스크립트 {…} […] 문법 (비구조화 할당&#x2F;구조분해 할당)</a></p></blockquote><blockquote><p><a href="https://velog.io/@public_danuel/destructuring-assignment">JavaScript ) 비구조화 할당 알아보기</a></p></blockquote><blockquote><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">구조 분해 할당</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;정의&quot;&gt;&lt;a href=&quot;#정의&quot; class=&quot;headerlink&quot; title=&quot;정의&quot;&gt;&lt;/a&gt;정의&lt;/h2&gt;&lt;p&gt;ECMAScript6(2015)에서 새로 추가된 비구조화 할당(Destructuring Assignment)이란 배열이나 객체</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 객체(Object)</title>
    <link href="http://example.com/2022/07/28/[JavaScript]%20%EA%B0%9D%EC%B2%B4/"/>
    <id>http://example.com/2022/07/28/[JavaScript]%20%EA%B0%9D%EC%B2%B4/</id>
    <published>2022-07-28T03:00:59.000Z</published>
    <updated>2022-10-18T09:18:47.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="객체에-접근하여-property-추가하기"><a href="#객체에-접근하여-property-추가하기" class="headerlink" title="객체에 접근하여 property 추가하기"></a>객체에 접근하여 property 추가하기</h2><p>obejct에 접근하는 방법은 dot(.)과 bracket([])이 있다.</p><ol><li>dot notation의 경우 키와 값은 항상 정해져 있다.</li><li>bracket의 경우 변수로 키와 값을 할당할 수 있다. 위의 경우 가지는 값에 따라 해당 변수에 유동적으로 다른 키와 다른 값으로 할당이 가능하다.</li></ol><p>위의 1,2번의 방법으로 아래 변수 information 에 담긴 객체에 property를 추가헤보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> information = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;apple&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>key값으로는 변수 addName, value값으로는 변수 porject를 담고싶다면</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addName = <span class="string">&quot;developer&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> project = <span class="string">&quot;instargram&quot;</span>;</span><br></pre></td></tr></table></figure><ol><li>[] 사용</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">information[addName] = project;</span><br></pre></td></tr></table></figure><ol start="2"><li>dot(.)사용</li></ol><p>위와 같이 bracket을 사용할 경우 변수 선언으로 각 해당 값을 넣을 수 있지만,<br>dot으로 접근할 경우에는 고정된 값만 직접적으로 할당시킬 수 있다.</p><p>그렇다면, 객체의 각 property에 접근하는 방법은 무엇일까?</p><h2 id="객체-순회하기"><a href="#객체-순회하기" class="headerlink" title="객체 순회하기"></a>객체 순회하기</h2><p>객체는 배열과는 달리 순서가 없고 영문일 경우 알파벳 순으로 나열 된다.<br>그렇다면 각 property에 접근하는 것은 불가능한 것일까?<br>객체의 내장함수를 활용하면 객체안의 각 property의 key값을 배열로 리턴할 수 있다!</p><h3 id="object-keys"><a href="#object-keys" class="headerlink" title="object.keys()"></a>object.keys()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;melon&quot;</span>,</span><br><span class="line">  <span class="attr">weight</span>: <span class="number">4350</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">16500</span>,</span><br><span class="line">  <span class="attr">isFresh</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj); <span class="comment">// [&#x27;name&#x27;, &#x27;weight&#x27;, &#x27;price&#x27;, &#x27;isFresh&#x27;]</span></span><br></pre></td></tr></table></figure><p>위와 같이 내장 함수를 활용하여 각 객체의 키값을 배열할 수 있다.<br>이를 활용하여 키값을 리턴하려면</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;melon&quot;</span>,</span><br><span class="line">  <span class="attr">weight</span>: <span class="number">4350</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">16500</span>,</span><br><span class="line">  <span class="attr">isFresh</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj); <span class="comment">// [&#x27;name&#x27;, &#x27;weight&#x27;, &#x27;price&#x27;, &#x27;isFresh&#x27;]</span></span><br></pre></td></tr></table></figure><p>그렇다면 키값만 리턴하는 내장함수도 있을까?</p><h3 id="object-values"><a href="#object-values" class="headerlink" title="object.values()"></a>object.values()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;melon&quot;</span>,</span><br><span class="line">  <span class="attr">weight</span>: <span class="number">4350</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">16500</span>,</span><br><span class="line">  <span class="attr">isFresh</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(obj); <span class="comment">// [&#x27;melon&#x27;, 4350, 16500, true]</span></span><br></pre></td></tr></table></figure><p>객체를 순회하는 두번째 방법으로는 for-in을 둘 수 있다.</p><h3 id="for-in"><a href="#for-in" class="headerlink" title="for-in"></a>for-in</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;melon&quot;</span>,</span><br><span class="line">  <span class="attr">weight</span>: <span class="number">4350</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">16500</span>,</span><br><span class="line">  <span class="attr">isFresh</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="keyword">const</span> value = obj[key];</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for-in문의 경우 객체 순회 외에도, 배열 순회에도 유용하게 사용 가능하다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;객체에-접근하여-property-추가하기&quot;&gt;&lt;a href=&quot;#객체에-접근하여-property-추가하기&quot; class=&quot;headerlink&quot; title=&quot;객체에 접근하여 property 추가하기&quot;&gt;&lt;/a&gt;객체에 접근하여 property 추가</summary>
      
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="object" scheme="http://example.com/tags/object/"/>
    
  </entry>
  
  <entry>
    <title>CSS3 layout display, position 정리</title>
    <link href="http://example.com/2022/07/20/%ED%8F%AC%EC%A7%80%EC%85%98/"/>
    <id>http://example.com/2022/07/20/%ED%8F%AC%EC%A7%80%EC%85%98/</id>
    <published>2022-07-20T01:00:00.000Z</published>
    <updated>2022-10-18T09:19:08.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="diplay"><a href="#diplay" class="headerlink" title="diplay"></a>diplay</h2><p>display는 요소를 block과 inline inlie-block중 어느 쪽으로 처리할지 결정하는 css 속성이다.</p><h3 id="1-inline"><a href="#1-inline" class="headerlink" title="1. inline"></a>1. inline</h3><ol><li>대표적으로 span 태그가 있다.</li><li>콘텐츠 내용의 크기만큼 공간을 차지한다.</li><li>inline 요소의 경우 태그 안에 콘텐츠가 없을 경우 화면에 나타나지 않으며, 컨텐츠 자체만을 꾸며주어 width로 크기를 설정할 수도 없다. 콘텐츠가 없어도 화면에 표시하고 크기를 설정하기 위해서는 display를 block으로 변경해 주어야한다.</li></ol><h3 id="2-inline-block"><a href="#2-inline-block" class="headerlink" title="2. inline-block"></a>2. inline-block</h3><ol><li>콘텐츠 내용의 크기만큼 공간을 차지한다.</li><li>콘텐츠가 없어도 표시 가능하며, width 로 크기 조정 또한 가능하다.</li><li>즉 inline적 요소와 block요소를 모두 가지고 있다.</li></ol><h3 id="3-block"><a href="#3-block" class="headerlink" title="3. block"></a>3. block</h3><ol><li>대표적으로 div 태그가 있다.</li><li>한 줄의 공간 모두를 차지한다.</li><li>태그안에 컨텐츠가 없어도 화면에 나타낼 수 있으며, width로 크기를 설정할 수 있다.</li></ol><h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><p>position은 기본값으로 static을 가지고 있다. 이는 html에 정의된 순서대로 브라우저상에 자연스럽게 보여지는 것을 의미한다.(제일 왼쪽, 제일 상단에서 시작)<br>따라서 요소의 위치를 바꾸기 위해서는 position의 default값을 바꾸어 주어야 한다.</p><h3 id="1-relative"><a href="#1-relative" class="headerlink" title="1. relative"></a>1. relative</h3><p>원래 (static)에 있어야 하는 자리에서, 상대적으로 옮겨간다.</p><h3 id="2-absolute"><a href="#2-absolute" class="headerlink" title="2. absolute"></a>2. absolute</h3><p>부모 태그의 위치에서 옮겨간다. 이때 부모 태그는 position 속성은 relative여야 하며, 부모 태그의 position 속성이 relative가 아닌 경우 relative 속성이 있는 가장 가까운 상위 태그를 찾아 그 위치를 기준으로 옮겨간다.</p><h3 id="3-fixed"><a href="#3-fixed" class="headerlink" title="3. fixed"></a>3. fixed</h3><p>window 안에서 옮겨간다. 웹페이지 안에서 브라우저가 기준이 된다.</p><h3 id="4-sticky"><a href="#4-sticky" class="headerlink" title="4. sticky"></a>4. sticky</h3><p>원래 있어야 하는 자리에서 있으면서(static), 스크롤을 하여도 없어지지 않고 그대로 자리에 붙어있는다. position의 속성을 위 태그들로 변경한 후 top, bottom, left, right value를 이용하여 요소의 위치를 변경할 수 있다.</p><blockquote><p>참고<br><a href="https://developer.mozilla.org/ko/docs/Web/CSS/display">MDN</a> &gt; <a href="http://www.tcpschool.com/css/css_position_display">TCP</a> &gt; <a href="https://www.daleseo.com/css-position/">DalsSeo</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;diplay&quot;&gt;&lt;a href=&quot;#diplay&quot; class=&quot;headerlink&quot; title=&quot;diplay&quot;&gt;&lt;/a&gt;diplay&lt;/h2&gt;&lt;p&gt;display는 요소를 block과 inline inlie-block중 어느 쪽으로 처리할지 결정</summary>
      
    
    
    
    <category term="CSS3" scheme="http://example.com/categories/CSS3/"/>
    
    
  </entry>
  
  <entry>
    <title>Semantic web/tag 사용을 지향해야 하는 이유</title>
    <link href="http://example.com/2022/07/19/%EC%8B%9C%EB%A9%98%ED%8B%B1/"/>
    <id>http://example.com/2022/07/19/%EC%8B%9C%EB%A9%98%ED%8B%B1/</id>
    <published>2022-07-19T09:00:00.000Z</published>
    <updated>2022-10-18T09:16:39.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="img-태그와-background-image"><a href="#img-태그와-background-image" class="headerlink" title="img 태그와 background-image"></a>img 태그와 background-image</h2><p>img 태그는 HTML 페이지에 이미지를 삽입하는 데 사용되는 태그이며, background-image는 요소의 배경 이미지를 한 개나 여러 개 지정할 수 있는 CSS의 속성이다.<br>위와 같이 img 태그와 background-image 속성은 웹상에서 동일하게 구현할 수 있다. 그렇다면 이 둘의 차이점은 없는 것일까? 어떠한 때에 어떠한 코드를 쓰는것이 적절할까?</p><h2 id="시맨틱-웹-Semantic-Web"><a href="#시맨틱-웹-Semantic-Web" class="headerlink" title="시맨틱 웹(Semantic Web)"></a>시맨틱 웹(Semantic Web)</h2><ol><li>시맨틱 웹은 의미론적인(Semantic) 웹이라는 뜻으로 컴퓨터가 이해할 수 있는 의미있는 코드를 작성하고 이를 컴퓨터가 처리하도록 하는 프레임워크이자 기술이다.</li><li>즉 웹에 존재하는 수많은 웹페이지들에 메타데이터를 부여하여, 기존의 자연어와 메타데이터 집합이었던 웹페이지를 의미와 관련성을 가지는 거대한 데이터베이스로 구축하고자 하는 발상이라 할 수 있다.</li><li>메타데이터: 데이터에 대한 데이터. 대표적 예시로 HTML 태그를 들 수 있다. 아래는 HTML5에서 새롭게 추가된 시맨틱 태그이다.<br>HTML5 new tag: header, nav, aside, section, article, footer<br>상기 태그 모두 content의 의미를 명확히 설명하고 있는 시맨틱 요소라 할 수 있다.</li></ol><p><img src="/../images/building-structure0719.png" alt="시맨틱웹"></p><h2 id="시맨틱-태그-Semantic-Tag"><a href="#시맨틱-태그-Semantic-Tag" class="headerlink" title="시맨틱 태그(Semantic Tag)"></a>시맨틱 태그(Semantic Tag)</h2><p>위와 같이 시맨틱 태그란 의미가 있는 태그를 말한다. div와 span와 같이 의미가 없는 non-semantic tag 라 할 수 있고, form, table, article 등 내용을 명확히 정의하는 태그를 semantic(의미있는) tag 라 할 수 있다. 시맨틱 태그로 구성하여 만든 시맨틱 웹의 가장 큰 장점은 검색 엔진에서 쉽게 웹문서의 내용을 노출할 수 있게 해준다는 것이다.</p><h2 id="검색엔진최적화-SEO"><a href="#검색엔진최적화-SEO" class="headerlink" title="검색엔진최적화(SEO)"></a>검색엔진최적화(SEO)</h2><p>검색엔진 최적화란 네이버 구글 등 검색 엔진에서 검색을 할때 가시성을 높이기 위해 사이트를 개선하는 프로세스를 말한다.</p><p><img src="/../images/SEO0719.png" alt="검색엔진최적화"></p><ol><li><p>크롤링(crawling): 키워드를 검색하였을때 검색 엔진에서 제일 먼저 거치는 작업으로 웹 크롤러를 이용하여 웹 페이지의 데이터를 가지고 온다. 크롤러는 DOM 형식의 웹 페이지를 볼 수 있어 그 안에 텍스트를 읽을 수는 있으나 이미지는 읽을 수 없다. 그러므로<br>SEO를 위해 이미지를 인식시키기 위하여 img 태그 삽입시 alt txt 태그를 달아주는 것이 좋다. 크롤러는 여러 링크를 넘나들며 웹 페이지에 관한 데이터를 검색 엔진 서버로 가져온다.</p></li><li><p>인덱싱(indexing): 크롤러가 가져온 데이터를 브라우저와 같은 방식으로 렌더링하여 그에 따라 페이지의 모든 콘텐츠와 메타 데이터를 분류하여 저장하는 작업이다. 수집한 모든 단어의 항목에 맞추어 각 페이지의 위치를 색인하고 데이터 베이스를 구성한다. 검색 엔진은 인덱싱을 통해 저장한 정보로 웹 페지이를 평가하며 웹사이트에 노출시킨다(ranking). 사용자가 검색하는 키워드와 색인 내 가장 많이 일치하는 페이지가 상위 노출된다. 특히 검색엔진은 태그를 기반으로 페이지 내 검색 키워드의 우선순위를 판단하므로, 코드 작성시 시맨틱 태그를 사용하여 검색 순위를 높일 수 있다.</p></li></ol><h3 id="img-태그-사용"><a href="#img-태그-사용" class="headerlink" title="img 태그 사용"></a>img 태그 사용</h3><ol><li>디자인 요소뿐 아니라 콘텐츠와 관련된 이미지의 경우 img 태그를 사용하여 색인을 생성하고, alt txt를 입력해주어 웹사이트가 검색 결과에 더 잘 보이도록 할 수 있다.좋은 SEO의 경우 광고보다 마케팅적으로 더욱 효율적이므로, 경쟁업체의 웹 사이트보다 더 높은 가시성과 검색 결과는 수익에 중대한 영향을 미칠 수 있다.</li><li>시각 장애인들은 웹 사이트 사용을 스크린 리더기에 의존을 하게 되는데, img 태그의 대체 텍스트(alt)는 스크린 리더기에 식별이 가능하기 때문에 웹 접근성을 더욱 높일 수 있다. *스크린 리더기: 웹 사이트 내용을 읽어주는 기계 혹은 기능</li></ol><h3 id="background-image-사용"><a href="#background-image-사용" class="headerlink" title="background-image 사용"></a>background-image 사용</h3><ol><li>콘텐츠의 직접적인 관련이 없는 순전히 디자인적 요소를 위해 사용하는 경우에 적절하다.</li><li>반복 이미지일 경우(ex.블로그 아이콘)에 쓰는 것이 좋다.</li></ol><p>즉 이미지가 컨텐츠와 직접적인 관련성이 있을 경우 img 태그를 사용하고 이때 alt 속성을 활용하여 웬 접근성을 높여주는 것이 좋은 seo라 할 수 있으며,이 외에 단지 디자인적 목적이라면 background image속성을 사용하는 것이 바람직하다고 할 수 있다.</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><blockquote><p>참고<br><a href="https://developer.mozilla.org/ko/docs/Glossary/SEO">MDN</a> &gt; <a href="https://searchengineland.com/guide/what-is-seo">keywordhero</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;img-태그와-background-image&quot;&gt;&lt;a href=&quot;#img-태그와-background-image&quot; class=&quot;headerlink&quot; title=&quot;img 태그와 background-image&quot;&gt;&lt;/a&gt;img 태그와 backgr</summary>
      
    
    
    
    <category term="CSS3" scheme="http://example.com/categories/CSS3/"/>
    
    
  </entry>
  
  <entry>
    <title>GIT - 깃 커밋 메시지 컨벤션(Git Commit Message Convention)</title>
    <link href="http://example.com/2022/07/12/type/"/>
    <id>http://example.com/2022/07/12/type/</id>
    <published>2022-07-12T02:00:00.000Z</published>
    <updated>2022-10-25T09:17:21.956Z</updated>
    
    <content type="html"><![CDATA[<p>커밋 메시지는 타입, 제목, 본문(선택), 꼬리말(선택) 세 부분으로 작성한다.</p><ul><li>[타입(Type)] 제목(Title)</li><li>본문(Body)</li><li>꼬리말(Footer)</li></ul><h2 id="제목"><a href="#제목" class="headerlink" title="제목"></a>제목</h2><ul><li><p>커밋 메세지 제목의 맨 앞에 타입(Type)을 붙여준다. 각 타입의 종류는 아래와 같다.</p><ul><li>기능(feat): 새로운 기능을 추가</li><li>버그(fix): 버그 수정</li><li>리팩토링(refactor): 코드 리팩토링</li><li>형식(style): 코드 형식, 정렬, 주석 등의 변경(동작에 영향을 주는 코드 변경 없음)</li><li>테스트(test): 테스트 추가, 테스트 리팩토링(제품 코드 수정 없음, 테스트 코드에 관련된 모든 변경에 해당)</li><li>문서(docs): 문서 수정(제품 코드 수정 없음)</li><li>기타(chore): 빌드 업무 수정, 패키지 매니저 설정 등 위에 해당되지 않는 모든 변경(제품 코드 수정 없음)</li></ul></li><li><p>총 글자 수는 50자 이내며 마지막에 마침표(.)를 붙이지 않는다.</p></li><li><p>커밋 유형들이 복합적인 경우 최대한 분리하여 커밋한다.</p></li></ul><h2 id="본문"><a href="#본문" class="headerlink" title="본문"></a>본문</h2><ul><li>본문은 한 줄당 72자 이하로 작성한다.</li><li>깃은 자동 줄바꿈을 지원하지 않으므로, 직접 줄바꿈을 해야 한다.</li><li>내용은 어떻게 변경하였는지 보다 무엇을, 왜 변경하였는지 설명한다.</li></ul><h2 id="꼬리말"><a href="#꼬리말" class="headerlink" title="꼬리말"></a>꼬리말</h2><ul><li>바닥 글은 선택 사항이며 이슈 트래커 ID를 참조하는데 사용된다.</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://tttsss77.tistory.com/58">Git 사용 규칙 - Git commit 메시지</a><br><a href="https://udacity.github.io/git-styleguide">Udacity Git Commit Message Style Guide</a><br><a href="https://sujinlee.me/professional-github">깃허브(GitHub)로 취업하기</a><br><a href="https://chris.beams.io/posts/git-commit">How to Write a Git Commit Message</a><br><a href="https://meetup.toast.com/posts/106">좋은 git 커밋 메시지를 작성하기 위한 7가지 약속</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;커밋 메시지는 타입, 제목, 본문(선택), 꼬리말(선택) 세 부분으로 작성한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[타입(Type)] 제목(Title)&lt;/li&gt;
&lt;li&gt;본문(Body)&lt;/li&gt;
&lt;li&gt;꼬리말(Footer)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="git" scheme="http://example.com/categories/git/"/>
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>우리가 보는 화면은 어떻게 만들어 졌을까?(1)Browser rendering</title>
    <link href="http://example.com/2022/07/08/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%20%EB%A0%8C%EB%8D%94%EB%A7%81/"/>
    <id>http://example.com/2022/07/08/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%20%EB%A0%8C%EB%8D%94%EB%A7%81/</id>
    <published>2022-07-08T05:00:00.000Z</published>
    <updated>2022-09-25T11:22:23.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="브라우저-broswer"><a href="#브라우저-broswer" class="headerlink" title="브라우저(broswer)"></a>브라우저(broswer)</h2><p>웹 페이지를 다운 받아 렌더링 하고 이를 사용자에게 보여주는 프로그램.<br>우리가 사용하는 가장 복잡한 응용 프로그램 중 하나라고 할 수 있다.<br>웹 페이지는 html, css, js로 구성되어 있으며 브라우저는 이를 실행해주는 엔진이다.</p><h3 id="브라우저의-기본-구조"><a href="#브라우저의-기본-구조" class="headerlink" title="브라우저의 기본 구조"></a>브라우저의 기본 구조</h3><p><img src="/../images/bowser220707.png" alt="브라우저이미지"></p><ol><li>사용자 인터페이스 - 주소 표시줄, 이전&#x2F;다음 버튼, 북마크 메뉴 등 요청한 페이지를 보여주는 창을 제외한 나머지 모든 부분이다.</li><li>브라우저 엔진 - 사용자 인터페이스와 &lt;-&gt; 렌더링 엔진 사이의 동작을 제어한다.</li><li>렌더링 엔진 - 요청받은 내용을 브라우저 화면에 표시한다.</li><li>통신 - HTTP 요청과 같은 네트워크 호출에 사용됨. 이것은 플랫폼 독립적인 인터페이스이고 각 플랫폼 하부에서 실행됨.</li><li>UI 백엔드 - 콤보 박스와 창 같은 기본적인 장치를 그림 플랫폼에서 명시하지 않은 일반적인 인터페이스로서 OS 사용자 인터페이스 체계를 사용.</li><li>자바스크립트 해석기 - 자바스크립트를 해석하고 실행.</li><li>자료 저장소 - 자료를 저장하는 계층, 쿠키를 저장하는 것과 같이 모든 종류의 자원을 하드 디스크에 저장할 필요가 있다.</li></ol><!-- 웹은 어떻게 작동할까?user - brower - website    enters a URl     DNS Server      Server --><h2 id="렌더링-엔진"><a href="#렌더링-엔진" class="headerlink" title="렌더링 엔진"></a>렌더링 엔진</h2><p>요청한 콘텐츠를 표시하는 역할을 한다.<br>safari는 webkit<br>firefox는 gecko<br>chrome은 blink 엔진을 사용하며, 모든 렌더링 엔진은 기본적으로 웹표준을 준수한다.</p><h3 id="렌더링-엔진의-목표"><a href="#렌더링-엔진의-목표" class="headerlink" title="렌더링 엔진의 목표"></a>렌더링 엔진의 목표</h3><ol><li>웹 페이지에 포함된 모든 요소(html, css, js, img 등)들을 화면에 보여준다</li><li>업데이트가 필요할때 효율적으로 렌더링할 수 있도록 자료 구조를 생성한다. 업데이트 예시:사용자 동작으로 인한 입력, 스크롤, 애니메이션동작, 비동기요청으로 인한 데이터로딩 등.</li></ol><h2 id="critical-rendering-path-CRP"><a href="#critical-rendering-path-CRP" class="headerlink" title="critical rendering path(CRP)"></a>critical rendering path(CRP)</h2><p><img src="/../images/rendering0708.png" alt="브우저렌더링프로세스"></p><ol><li>html - dom 트리(위에서 아래로)</li><li>css - cssom 트리(위에서 아래로) ex. body태그에 text-align을 정해준다면, 자식 요소에도 동일하게 적용됨</li><li>렌더트리(render tree): dom tree + cssom tree<br>화면에 표시되어야 할 모든 노드의 컨텐츠, 스타일 정보를 포함하는 트리.<br>document부터 각 노드를 순회하면서 각각에 맞는 cssom을 찾아 규칙을 적용한다.<br>간단히 말해 dom 트리와 cssom 트리를 합해놓은 것이다.<br>이때 렌더에 포함되지 않는 meta 태그나 Display none등은 포함되지 않는다.</li><li>reflow(layout): 정확한위치, 크기 계산</li><li>paint: 마지막으로 실제 픽셀로 그려지도록 변환한다. 텍스트, 이미지들이 실제 픽셀로 그려진다.</li></ol><h3 id="브라우저-렌더링-최적화"><a href="#브라우저-렌더링-최적화" class="headerlink" title="브라우저 렌더링 최적화"></a>브라우저 렌더링 최적화</h3><p>사용자 동작으로 css가 변경되거나 애니메이션 재생이 일어났을땐?</p><p><img src="/../images/browserrendering0708.jpeg" alt="렌더링최적화"></p><p>브라우저 렌더링의 프로세스는 아래와 같다.</p><ol><li>다시 layout이 발생하는 경우 - 주로 요소의 크기나 위치가 바뀌었을때,<br>혹은 브라우저 창의 크기가 바뀌었을때 다시 발생. 레이아웃 &gt; 페인트 &gt; 레이아웃 합성의 과정을 거친다.</li><li>paint부터 다시 발생되는 경우<br>주로 배경 이미지나 텍스트 색상, 그림자등 레이아웃의 수치를 변화시키지 않는 스타일의 변경이 일어났을때 발생.<br>paint 단계에서는 여러 layer를 나눠 픽셀을 채워넣는 작업을 한다. 한번에 처리하지 않고 특수한 알고리즘에 따라 layer를 나눠 처리하는데, 이는 사용자 이벤트 발생으로 특정 요소를 수정해야 할 때, 전체를 다시 paint하지 않고 특정 layer만을 다시 페인트하여 효율적으로 처리할 수 있는 이점을 가진다.</li><li>레이어의 합성(composite)만 발생하는 경우<br>성능상으로 가장 큰 이점을 가짐. paint 단계에서 여러 layer로 나눠진 raster 픽셀들을 우리가 실제로 보는 화면처럼 합성해주는 단계이다.<br>레이아웃과 페인트를 수행하지 않고 레이어의 합성만 발생하기 때문에 성능상으로 가장 큰 이점을 가진다.</li></ol><p>위 그림처럼 모든 JS&gt; style &gt; layout &gt; paint &gt; composite 의 모든 과정을 거칠 필요 없이 필요한 단계부터 실행하여 렌더링 속도를 높일 수 있다. 어떤 경우에 어떤 상태부터 업데이트가 되는지 확인하고 싶다면, 하기 사이트에서 확인이 가능하다.<br>css triggers - (<a href="https://csstriggers.com/">https://csstriggers.com</a>)<br>한 예시로 위 사이트에서 blink 엔진에서는 3가지(layout, paint, composite) 모두 일어남을 확인할 수 있다.</p><blockquote><p>참고<br><a href="https//csstriggers.com">CSS트리거</a><br><a href="https://d2.naver.com/helloworld/59361">NAVERD2</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;브라우저-broswer&quot;&gt;&lt;a href=&quot;#브라우저-broswer&quot; class=&quot;headerlink&quot; title=&quot;브라우저(broswer)&quot;&gt;&lt;/a&gt;브라우저(broswer)&lt;/h2&gt;&lt;p&gt;웹 페이지를 다운 받아 렌더링 하고 이를 사용자에게</summary>
      
    
    
    
    
    <category term="browser" scheme="http://example.com/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>GIT - 깃 명령어</title>
    <link href="http://example.com/2022/07/08/%E1%84%80%E1%85%B5%E1%86%BA-%E1%84%86%E1%85%A7%E1%86%BC%E1%84%85%E1%85%A7%E1%86%BC%E1%84%8B%E1%85%A5/"/>
    <id>http://example.com/2022/07/08/%E1%84%80%E1%85%B5%E1%86%BA-%E1%84%86%E1%85%A7%E1%86%BC%E1%84%85%E1%85%A7%E1%86%BC%E1%84%8B%E1%85%A5/</id>
    <published>2022-07-08T03:00:00.000Z</published>
    <updated>2022-10-25T09:17:52.490Z</updated>
    
    <content type="html"><![CDATA[<p>자주 쓴 명령어 위주로 작성, 추후 계속 추가 예정</p><h2 id="초기화"><a href="#초기화" class="headerlink" title="초기화"></a>초기화</h2><p>깃 초기화 : 기존 디렉토리를 git 저장소로 만든다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>깃 상태 확인 : 현재 작업중인 브랜치와 파일 상태를 알려준다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><h2 id="설정"><a href="#설정" class="headerlink" title="설정"></a>설정</h2><p>전역 사용자 이름 생성</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;your name&quot;</span><br></pre></td></tr></table></figure><p>전역 사용자 이메일 생성</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email &quot;your_email@youremail.com&quot;</span><br></pre></td></tr></table></figure><p>저장소별 사용자 이름 생성</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config user.name &quot;your name&quot;</span><br></pre></td></tr></table></figure><p>저장소별 사용자 이메일 생성</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config user.email &quot;your_email@youremail.com&quot;</span><br></pre></td></tr></table></figure><blockquote><p>사용자 설정이 되어 있지 않으면 깃허브의 저장소에 커밋 이력 및 작성자의 아이콘도 ? 로 표시된다. 웬만하면 사용자 설정을 해주도록 하자</p></blockquote><p>저장소 복제하기</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone &quot;url&quot;</span><br></pre></td></tr></table></figure><p>저장소 추가하기</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin &quot;url&quot;</span><br></pre></td></tr></table></figure><p>로컬저장소가 바라보고 있는 저장소의 정보 확인</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><p>전역 설정 정보 조회</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global --list</span><br></pre></td></tr></table></figure><p>저장소 정보 조회</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br></pre></td></tr></table></figure><h2 id="파일-추가-및-업로드"><a href="#파일-추가-및-업로드" class="headerlink" title="파일 추가 및 업로드"></a>파일 추가 및 업로드</h2><p>스테이지에 수정된 파일 업로드</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add &#x27;file name&#x27;</span><br></pre></td></tr></table></figure><p>스테이지에 수정된 모든 파일 업로드</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure><p>커밋하기</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &#x27;message&#x27;</span><br></pre></td></tr></table></figure><p>원격 저장소에 업로드</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p>원격 저장소에서 다운로드</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure><h2 id="되돌리기"><a href="#되돌리기" class="headerlink" title="되돌리기"></a>되돌리기</h2><p>스테이지에 올라간 파일 전부 내리기</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset</span><br></pre></td></tr></table></figure><h2 id="이력"><a href="#이력" class="headerlink" title="이력"></a>이력</h2><p>모든 이력 보기</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br></pre></td></tr></table></figure><p>이력 나가기</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ q</span><br></pre></td></tr></table></figure><p>이력과 변경사항을 함께 보기</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log -p</span><br></pre></td></tr></table></figure><h2 id="브랜치"><a href="#브랜치" class="headerlink" title="브랜치"></a>브랜치</h2><p>지역 브랜치 목록 보기</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><p>원격 저장소 브랜치 목록 보기</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -r</span><br></pre></td></tr></table></figure><p>지역 브랜치 및 원격 저장소 모든 브랜치 목록 보기</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a</span><br></pre></td></tr></table></figure><p>브랜치 생성하기</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch &quot;branch name&quot;</span><br></pre></td></tr></table></figure><p>해당 브랜치로 체크아웃 하기</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout &quot;branch name&quot;</span><br></pre></td></tr></table></figure><p>브랜치를 생성하고 생성된 체크아웃 하기</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b &quot;branch name&quot;</span><br></pre></td></tr></table></figure><p>해당 브랜치 삭제하기</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d &quot;branch name&quot;</span><br></pre></td></tr></table></figure><p>해당 브랜치 강제 삭제하기</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -D &quot;branch name&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;자주 쓴 명령어 위주로 작성, 추후 계속 추가 예정&lt;/p&gt;
&lt;h2 id=&quot;초기화&quot;&gt;&lt;a href=&quot;#초기화&quot; class=&quot;headerlink&quot; title=&quot;초기화&quot;&gt;&lt;/a&gt;초기화&lt;/h2&gt;&lt;p&gt;깃 초기화 : 기존 디렉토리를 git 저장소로 만든다.</summary>
      
    
    
    
    <category term="git" scheme="http://example.com/categories/git/"/>
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - 비동기처리와 콜백함수의 개념</title>
    <link href="http://example.com/2022/07/01/%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98/"/>
    <id>http://example.com/2022/07/01/%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98/</id>
    <published>2022-07-01T10:10:00.000Z</published>
    <updated>2022-10-18T09:46:47.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="비동기처리와-콜백함수"><a href="#비동기처리와-콜백함수" class="headerlink" title="비동기처리와 콜백함수"></a>비동기처리와 콜백함수</h1><h3 id="1-자바스크립트는-동기적인가-비동기적인가"><a href="#1-자바스크립트는-동기적인가-비동기적인가" class="headerlink" title="1. 자바스크립트는 동기적인가 비동기적인가?"></a>1. 자바스크립트는 동기적인가 비동기적인가?</h3><p>1)자바스크립트는 동기적이다.<br>호이스팅이 된 이후부터 코드가 작성된 순서대로 하나씩 동기적으로 실행한다. *호이스팅(Hoisting)이란? 자바스크립트에서 코드를 처리할 때 먼저 var 변수 등의 선언이나 function declaration을 최상단으로 띄운 후 코드를 읽는다. 이로 인해 var 변수의 경우 중복 선언 가능 등의 문제점이 야기 되자 ES6에서 let 이 추가되었다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>); <span class="comment">//차례대로 1,2,3 출력</span></span><br></pre></td></tr></table></figure><p>2)자바스크립트는 비동기적이다. 언제 코드가 처리될지 알 수 없다.<br>대표적 예시 - setTimeout (웹 API)<br>브라우저에서 제공되어지는 API 로 지정한 시간이 지나면 전달 받은 함수를 호출한다.<br>브라우저에서 호출(callback)하면 자바스크립트는 전달했던 함수를 화면에 출력(실행)한다.<br>setTimeout은 자바스크립트 비동기 처리의 대표적 예시이다.</p><h3 id="setTimeout을-사용한-자바스크립트의-비동기-처리-예시"><a href="#setTimeout을-사용한-자바스크립트의-비동기-처리-예시" class="headerlink" title="setTimeout을 사용한 자바스크립트의 비동기 처리 예시"></a>setTimeout을 사용한 자바스크립트의 비동기 처리 예시</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  cossole.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>위 코드는 아래와 같이 간단히 작성 가능하다.(arrow function)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>), <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>위 코드를 보면, setTimeout은 웹 API이므로 자바스크립트 엔진은 브라우저에게 파라미터로 해당 함수를 전달한다. 브라우저는 주어진 1초의 시간동안 함수를 처리한 후 해당 함수를 호출한다(callback). 브라우저로부터 호출 받은 자바스크립트는 해당 결과값을 처리(출력)한다.</p><h3 id="jquery의-Ajax을-사용한-자바스크립트의-비동기-처리-예시"><a href="#jquery의-Ajax을-사용한-자바스크립트의-비동기-처리-예시" class="headerlink" title="jquery의 Ajax을 사용한 자바스크립트의 비동기 처리 예시"></a>jquery의 Ajax을 사용한 자바스크립트의 비동기 처리 예시</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> tableData;</span><br><span class="line">  $.<span class="title function_">get</span>(<span class="string">&quot;https://domain.com/products/1&quot;</span>, <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    tableData = response;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> tableData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getData</span>()); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>*Ajax란? 서버(Server)와 비동기적으로 데이터 주고 받는 자바스크립트의 기술을 의미한다. get 코드로 서버에게 요청 하며 새로고침 없이 데이터를 요청해 부드럽게 동작이 가능하다는 장점이 있다.<br>*서버(server)란? client가 데이터 요구하면 데이터를 보내주는 프로그램이다.</p><p>코드를 살펴보자. 왜 undefined가 나왔을까? 자바스크립트 엔진은 함수 호이스팅 후 다음 코드를 읽어간다. 바로 다음 코드에서 getData함수를 호출 했으므로 해당 함수를 처리하는데 Ajax는 서버에 데이터를 요청하는 기능이므로, 자바스크립트 엔진은 서버에서 해당 데이터 응답이 올때까지 마냥 기다리지 않고 바로 다음 코드를 읽는다.(비동기 처리) 따라서 undefined가 출력된다.</p><p>그렇다면, 위와 같은 문제를 해결하고 원하는 때에 원하는 값을 출력할 수 있는 방법은 없을까? 콜백함수를 이용하여 이를 해결할 수 있다.</p><h3 id="callback-함수"><a href="#callback-함수" class="headerlink" title="callback 함수"></a>callback 함수</h3><p>함수에 파라미터로 들어가는 함수로, 순차적으로 실행하고 싶을때 사용한다.<br>파라미터로 들어가 있는 함수를 전달 후 처리가 완료되면 호출(callback)한다.</p><h3 id="callback-함수-사용-예시"><a href="#callback-함수-사용-예시" class="headerlink" title="callback 함수 사용 예시"></a>callback 함수 사용 예시</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">callbackFunc</span>) &#123;</span><br><span class="line">  $.<span class="title function_">get</span>(<span class="string">&quot;https://domain.com/products/1&quot;</span>, <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="title function_">callbackFunc</span>(response); <span class="comment">// 서버에서 받은 데이터 response를 callbackFunc() 함수에 넘겨줌</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getData</span>(<span class="keyword">function</span> (<span class="params">tableData</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(tableData); <span class="comment">// $.get()의 response 값이 tableData에 전달됨</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>자바스크립트 엔진은 함수 선언부분을 호이스팅한 후에 다음 코드를 읽어나간다. 다음 코드에서 getData 함수를 호출했는데 파라미터로 함수가 들어가 있다.(콜백함수)<br>뜻을 해석하면 getData함수를 파라미터에 function(tableData)를 넣어 실행하라는 의미이다. 자바스크립트는 getData함수에 콜백 함수를 파라미터로 넣어서 코드를 읽어 나가고,<br>해당 서버에 요청한 데이터 response의 값이 출력된다. 이렇게 콜백함수를 이용하면 자바스크립트의 비동기 처리의 특성에도 원하는 때에 원하는 값을 얻어올 수 있다.</p><blockquote><p>참고<br><a href="https://joshua1988.github.io/web-development/javascript/javascript-asynchronous-operation/#%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC%EC%9D%98-%EB%91%90-%EB%B2%88%EC%A7%B8-%EC%82%AC%EB%A1%80">캡틴판교</a> &gt; <a href="https://recordboy.github.io/2020/06/04/javascript-asynchronous-callback/">기록맨</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;비동기처리와-콜백함수&quot;&gt;&lt;a href=&quot;#비동기처리와-콜백함수&quot; class=&quot;headerlink&quot; title=&quot;비동기처리와 콜백함수&quot;&gt;&lt;/a&gt;비동기처리와 콜백함수&lt;/h1&gt;&lt;h3 id=&quot;1-자바스크립트는-동기적인가-비동기적인가&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="callback" scheme="http://example.com/tags/callback/"/>
    
  </entry>
  
  <entry>
    <title>Network 포트(Port)</title>
    <link href="http://example.com/2022/07/01/port/"/>
    <id>http://example.com/2022/07/01/port/</id>
    <published>2022-07-01T07:10:00.000Z</published>
    <updated>2022-10-25T09:25:23.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="포트-Port"><a href="#포트-Port" class="headerlink" title="포트(Port)"></a>포트(Port)</h2><ul><li>컴퓨터의 주변 장치와 연결하기 위한 연결단</li><li>IP 내에서 프로세스 구분을 하기 위해 사용</li><li>쉽게 말해 각 프로토콜의 데이터가 통하는 논리적 통로</li><li>각 포트는 번호로 구별되며 이 번호를 포트 번호라고 함</li><li>포트 번호는 IP 주소와 함께 쓰여 해당하는 프로토콜에 의해 사용됨</li></ul><h2 id="포트-번호는-크게-세-종류로-구분된다"><a href="#포트-번호는-크게-세-종류로-구분된다" class="headerlink" title="포트 번호는 크게 세 종류로 구분된다."></a>포트 번호는 크게 세 종류로 구분된다.</h2><ul><li>0번 ~ 1023번: 잘 알려진 포트 (well-known port)</li><li>1024번 ~ 49151번: 등록된 포트 (registered port)</li><li>49152번 ~ 65535번: 동적 포트 (dynamic port)</li></ul><h2 id="잘-알려진-포트-번호의-대표적-예는-다음과-같다"><a href="#잘-알려진-포트-번호의-대표적-예는-다음과-같다" class="headerlink" title="잘 알려진 포트 번호의 대표적 예는 다음과 같다."></a>잘 알려진 포트 번호의 대표적 예는 다음과 같다.</h2><ul><li>20 : FTP(data)</li><li>21 : FTP(제어)</li><li>22 : SSH</li><li>23 : 텔넷</li><li>53 : DNS</li><li>80 : 월드 와이드 웹 HTTP</li><li>119 : NNTP</li><li>443 : TLS&#x2F;SSL 방식의 HTTP</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://ko.wikipedia.org/wiki/%ED%8F%AC%ED%8A%B8_(%EC%BB%B4%ED%93%A8%ED%84%B0_%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%82%B9)">포트 (컴퓨터 네트워킹)</a><br><a href="https://namu.wiki/w/%ED%8F%AC%ED%8A%B8">포트</a>  </p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;포트-Port&quot;&gt;&lt;a href=&quot;#포트-Port&quot; class=&quot;headerlink&quot; title=&quot;포트(Port)&quot;&gt;&lt;/a&gt;포트(Port)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;컴퓨터의 주변 장치와 연결하기 위한 연결단&lt;/li&gt;
&lt;li&gt;IP 내에서 프로</summary>
      
    
    
    
    <category term="network" scheme="http://example.com/categories/network/"/>
    
    
    <category term="network, port" scheme="http://example.com/tags/network-port/"/>
    
  </entry>
  
  <entry>
    <title>jQuery todolist UI</title>
    <link href="http://example.com/2022/06/28/TODOLIST/"/>
    <id>http://example.com/2022/06/28/TODOLIST/</id>
    <published>2022-06-28T01:34:00.000Z</published>
    <updated>2022-10-18T09:46:22.832Z</updated>
    
    <content type="html"><![CDATA[<h3>TO DO LIST 만들기</h3><h1 id="조건"><a href="#조건" class="headerlink" title="조건"></a>조건</h1><ol><li>버튼을 클릭했을 때 작성한 내용이 할일로 추가 된다.</li><li>엔터키를 눌렀을 때 버튼을 클릭한 것과 동일한 효과 적용</li><li>작성된 리스트를 더블 클릭하면 밑줄이 그어진 후 서서히 삭제된다.</li><li>입력창에 마우스 클릭 시 공란이 되게 한다.</li></ol><h2 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h2><style>.sample .container {  padding: 20px;  width: 300px;  margin: 0 auto;  margin-top: 40px;  background: white;  border-radius: 5px;}.sample form {  display: inline-block;}.sample input {  padding: 4px 15px 4px 5px;}.sample #button {  display: inline-block;  background-color: #fc999b;  color: #ffffff;  border-radius: 5px;  text-align: center;  margin-top: 2px;  padding: 5px 15px;}.sample #button:hover {  cursor: pointer;  opacity: .8;}.sample ol {  padding-left: 20px;}.sample ol li {  padding: 5px;  color: #000;}.sample ol li:nth-child(even) {  background: #dfdfdf;}.sample .strike {  text-decoration: line-through;}.sample li:hover {  cursor: pointer;}</style><div class="sample">  <div class="container">  <h2>Simple To Do List</h2>  <p><em>Click and drag to reorder, double click to cross an item off.</em></p>  <!-- <form name="toDoList"> -->  <input type="text" name="ListItem" />  <!-- </form> -->  <div id="button">Add</div>  <br />  <ol></ol>  </div><div><script src="https://code.jquery.com/jquery-2.2.4.min.js"></script><link href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" rel="stylesheet" type="text/css" /><script type="text/javascript" src="https://code.jquery.com/jquery-1.12.4.min.js"></script><script type="text/javascript" src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script><script>$(document).ready(function () {  $('#button').click(function () {    let toAdd = $('input[name=ListItem]').val(); $('.sample ol').append('<li>' + toAdd + '</li>');  });   $('input[name=ListItem]').keypress(function (e) {    if (e.keyCode == 13) {      $('#button').click();        }  });   $(document).on('dblclick', 'li', function () {    $(this).toggleClass('strike').fadeOut('slow');    return false;  }); $('input').focus(function () { $(this).val(''); });   $('.sample ol').sortable();});</script><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&quot;#button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> toadd = $(<span class="string">&quot;input[name=ListItem]&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">    $(<span class="string">&quot;ol&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;li&gt;&quot;</span> + toAdd + <span class="string">&quot;&lt;/li&gt;&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  $(<span class="string">&quot;input[name=ListItem]&quot;</span>).<span class="title function_">keyup</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">keyCode</span> == <span class="number">13</span>) &#123;</span><br><span class="line">      $(<span class="string">&quot;#button&quot;</span>).<span class="title function_">click</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  $(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&quot;dblclick&quot;</span>, <span class="string">&quot;li&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">toggleClass</span>(<span class="string">&quot;strike&quot;</span>).<span class="title function_">fadeOut</span>(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  $(<span class="string">&quot;input&quot;</span>).<span class="title function_">focus</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">val</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  $(<span class="string">&quot;ol&quot;</span>).<span class="title function_">sortable</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="해설"><a href="#해설" class="headerlink" title="해설"></a>해설</h2><ol><li>ul 안에 li 요소가 추가된 경우 li를 선택하여 이벤트 코드를 작성할 경우 코드 이후에 작성된 li는 이벤트를 실행시키지 못하는 경우가 있으므로, 이런 경우 document를 선택하고 발생할 이벤트, 선택자를 작성해주면 해당 이벤트를 실행시킬 수 있다.</li><li>li에 (더블)클릭 이벤트를 작성해 줄 경우, 부모 태그 요소에도 이벤트가 적용되어 중복 실행될 수 있으므로 버블링을 방지하기 위해 return false를 작성해준다.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;TO DO LIST 만들기&lt;/h3&gt;

&lt;h1 id=&quot;조건&quot;&gt;&lt;a href=&quot;#조건&quot; class=&quot;headerlink&quot; title=&quot;조건&quot;&gt;&lt;/a&gt;조건&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;버튼을 클릭했을 때 작성한 내용이 할일로 추가 된다.&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="jQuery" scheme="http://example.com/categories/jQuery/"/>
    
    
  </entry>
  
</feed>
